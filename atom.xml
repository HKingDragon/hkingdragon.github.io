<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon&#39;s Blog</title>
  
  
  <link href="https://github.com/HKingDragon/hkingdragon.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/HKingDragon/hkingdragon.github.io/"/>
  <updated>2022-04-26T11:41:01.094Z</updated>
  <id>https://github.com/HKingDragon/hkingdragon.github.io/</id>
  
  <author>
    <name>Dragon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FAT32系统</title>
    <link href="https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/FAT32%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/FAT32%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-04-26T11:38:48.000Z</published>
    <updated>2022-04-26T11:41:01.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FAT32系统"><a href="#FAT32系统" class="headerlink" title="FAT32系统"></a>FAT32系统</h1><h2 id="1-FAT32文件系统结构总览"><a href="#1-FAT32文件系统结构总览" class="headerlink" title="1.FAT32文件系统结构总览"></a>1.FAT32文件系统结构总览</h2><p>FAT32文件系统由DBR及其保留区、FAT1、FAT2、DATA区四个部分</p><p><img src="https://s2.loli.net/2022/04/26/OuRqJesxh16cbaV.png" alt="image-20220426193330987"></p><ol><li>DBR及其保留扇区：操作系统引导记录，DBR后有一些保留扇区</li><li>FAT1：文件分配表，FAT32一般有两份FAT,FAT1是第一个也是主FAT</li><li>FAT2：FAT1的备份</li><li>DATA:DATA数据区，FAT32主要区域，包含目录项</li></ol><h2 id="2-FAT32-DBR分析"><a href="#2-FAT32-DBR分析" class="headerlink" title="2.FAT32 DBR分析"></a>2.FAT32 DBR分析</h2><p>组成部分：跳转指令、OEM代号、BPB、引导程序和结束标志</p><ol><li><h3 id="跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准"><a href="#跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准" class="headerlink" title="跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准"></a>跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准</h3><p>EB 58 代表汇编语言额JMP 58 ，所以实际执行的下一条指令应位于5A，紧接着跳转指令的是一条空指令NOP（90H）</p></li><li><h3 id="OEM-代号：占用8字节，内容由创建该文件系统的OEM厂商安排。"><a href="#OEM-代号：占用8字节，内容由创建该文件系统的OEM厂商安排。" class="headerlink" title="OEM 代号：占用8字节，内容由创建该文件系统的OEM厂商安排。"></a>OEM 代号：占用8字节，内容由创建该文件系统的OEM厂商安排。</h3><p>OEM代号为”MSDOS5.0”说明这个FAT32分区是由微软的Windows 2000以上的操作系统格式化创建的</p></li><li><h3 id="BPB：FAT32-的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息"><a href="#BPB：FAT32-的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息" class="headerlink" title="BPB：FAT32 的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息"></a>BPB：FAT32 的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息</h3><p><img src="https://s2.loli.net/2022/04/26/Vhyd31nmurape2Y.png" alt="image-20220426193430807"></p></li></ol><p>​winhex模板查看文件系统信息</p><p>​<img src="https://s2.loli.net/2022/04/26/t4uRQTxWnFyNf8J.png" alt="image-20220426193453768"></p><p>常用信息：</p><ul><li>JMP instruction :跳转指令</li><li>OEM：OEM代号</li><li>Bytes per sector：每扇区字节数</li><li>Sectors per cluster：每簇扇区数</li><li>Reserved sectors：DBR保留扇区数(FAT1的开始扇区号)</li><li>Number of FATs：FAT表个数</li><li>Sectors per track：每FAT表扇区数</li><li>Root dir 1st duster：根目录首簇号</li><li>FSinfo setor：文件系统信息扇区号</li><li>Backup boot sector：DBR备份扇区号</li><li>File system：文件系统格式</li></ul><p>参数详细分析</p><ol><li><p>0BH~OCH:每扇区字节数</p><ul><li>记录每个扇区的大小，一般为512字节，512不是固定值，合法值包括512、1024、2048、4096</li></ul></li><li><p>ODH~ODH：每簇扇区数</p><ul><li>每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇</li><li>FAT32最大支持128扇区的簇</li><li>在FAT32文件系统中所有的簇都从2号簇开始进行编写，所有簇都位于数据区内，在数据区之前时没有簇的</li></ul></li><li><p>0EH~0FH：DBR保留扇区数</p><ul><li>DBR保留扇区数是指DBR本身占用的扇区以及其后保留扇区的总和，也就是DBR到FAT1之间的是扇区总和，或者说是FAT1的开始扇区号</li><li>FAT32系统该值的取值范围是32扇区到38扇区之间</li></ul></li><li><p>10H~10H:FAT表的个数</p><ul><li>FAT表格式描述该文件系统有几个FAT表，一般FAT文件系统中都有两个FAT，即FAT1和FAT2,FAT2是FAT1的备份</li></ul></li><li><p>15H~15H：介质描述符</p></li></ol><ul><li>介质描述符是描述磁盘介质的参数，根据磁盘性质不同，取不同的值。</li></ul><ol start="6"><li><p>18H~19H：每磁道扇区数</p><ul><li>其值一般为255</li></ul></li><li><p>20H~23H：扇区总数</p><ul><li>扇区总数是指分区的总扇区数，也就是FAT32分区的大小</li></ul></li><li><p>24H~27H：每FAT扇区数</p><ul><li>记录FAT32分区中每个FAT表占用的扇区数</li></ul></li><li><p>28H~29H：标志</p><ul><li>表示FAT2是否可用，当其二进制最高位置为1时，表示只用FAT1可用，否则FAT2也可以用</li></ul></li><li><p>2AH~2BH：版本</p><ul><li>通常都为0</li></ul></li><li><p>2CH~2FH：根目录首簇号</p><ul><li>通常把数据区的第一个簇分配给根目录使用，也就是2号簇</li></ul></li><li><p>30H~31H：文件系统信息扇区号</p><ul><li><p>FAT32文件系统在DBR的保留扇区中安排了一个文件系统信息扇区，用以记录数据区中空闲簇的数量以及下一个空闲簇的簇号，该扇区一般在分区的1号扇区</p><p><img src="https://s2.loli.net/2022/04/26/4CztfPLlDAQGTeE.png" alt="image-20220426193610006"></p></li></ul></li><li><p>32H~33H：DBR备份扇区</p><ul><li>FAT32系统在DBR的保留扇区中安排了一个DBR的备份，一般在6号扇区，分区的第7个扇区。该备份扇区与原DBR扇区的内容和完全一样，如果原DBR遭到破坏，可以用备份扇区修复。</li></ul></li><li><p>40H~40H：BIOS驱动器号</p><ul><li>BIOS所描述的设备号码，一般把硬盘定义为8XH</li></ul></li><li><p>42H~42H:扩展引导标志</p><ul><li>扩展引导标记用来确认后面的三个参数是否有效，一般值为29H</li></ul></li><li><p>52H~59H：文件系统类型</p><ul><li>BPB的最后一个参数，直接用ASCII码记录当前分区的文件系统类型</li></ul></li></ol><h3 id="4-引导程序"><a href="#4-引导程序" class="headerlink" title="4.引导程序"></a>4.引导程序</h3><p>​FAT32的DBR引导扇区占用420字节（5AH~1FDH）</p><h3 id="5-结束标志"><a href="#5-结束标志" class="headerlink" title="5.结束标志"></a>5.结束标志</h3><p>​DBR、MBR、EBR的结束标志都相同为“55AA”</p><p><strong>以上五个部分共占用512字节，称它为DOS引导扇区。</strong></p><h2 id="3-FAT32文件系统的FAT表分析"><a href="#3-FAT32文件系统的FAT表分析" class="headerlink" title="3.FAT32文件系统的FAT表分析"></a>3.FAT32文件系统的FAT表分析</h2><h3 id="1-FAT表的特点"><a href="#1-FAT表的特点" class="headerlink" title="1.FAT表的特点"></a>1.FAT表的特点</h3><ol><li><p>每个FAT项的大小有32位（相当于4字节）</p></li><li><p>FAT32文件系统的FAT项是32为的，但是Windows系统只能用到26位。</p></li><li><p>系统能管理的簇大小可以达到128个扇区（64KB），FAT32最多可以管理的簇数位67108863，FAT32能够管理的分区大小为64*67108863&#x3D;4294967232KB&#x3D;4TB</p></li><li><p>FAT表中未使用的簇对应的FAT项用”00 00 00 00“，已经分配的簇号对应的FAT表项为”FF FF FF EF”,表示坏簇的表项为”FF FF FF F7”，文件结束簇为FF FF FF F8~FFFFFFFFF</p><table><thead><tr><th>表项值（12位）</th><th>表项值（16位）</th><th>表项值（32位）</th><th>簇描述信息含义</th></tr></thead><tbody><tr><td>000H</td><td>0000H</td><td>00000000H</td><td>“0”值（未分配使用）</td></tr><tr><td>001H–FEFH</td><td>0001–FFEFH</td><td>00000001–FFFFFFEFH</td><td>“一个簇号”（已占用）</td></tr><tr><td>FF0H–FF6H</td><td>FFF0–FFF6H</td><td>FFFFFFF0–FFFFFFF6H</td><td>保留</td></tr><tr><td>FF7H</td><td>FFF7H</td><td>FFFFFFF7H</td><td>坏簇</td></tr><tr><td>FF8H–FFFH</td><td>FFF8H–FFFFH</td><td>FFFFFFF8–FFFFFFFFH</td><td>“EOF”（文件结束簇）</td></tr></tbody></table></li></ol><h3 id="2-FAT表的实际应用"><a href="#2-FAT表的实际应用" class="headerlink" title="2.FAT表的实际应用"></a>2.FAT表的实际应用</h3><p>DBR所在分区，定位FAT1的步骤：</p><ol><li>系统通过该分区的分区表信息，定位到DBR扇区</li><li>读取DBR的BPB，通过读取OEH~OFH偏移出“DBR保留参数”这个参数</li><li>跳转到“DBR保留参数”这个扇区，就是FAT1表项的开始</li></ol><p><strong>格式化程序会把分配给FAT表的所有扇区都清零</strong></p><p>F8 FF FF 0F：F8表示介质类型为硬盘</p><p>DBR所在分区，定位备份FAT2的步骤：</p><ol><li>系统通过该分区的分区表信息，定位到DBR扇区</li><li>读取DBR的OEH~OFH偏移处，可以得到“DBR保留扇区数”</li><li>读取DBR的24H~27H偏移处，可以得到“每FAT扇区数”</li><li>FAT2的位置&#x3D;DBR保留扇区数+每FAT扇区数</li></ol><p>FAT2与FAT1的内容是相同的，FAT2是FAT1的备份</p><p><strong>如果FAT项为非零值，那么可能有三种情况：</strong></p><ul><li>FAT项映射的簇是一个不可用的坏簇，那么该FAT项中的值为坏簇标志（FFFFFFF7H）</li><li>FAT项映射的是某个文件的最后一个簇，那么该FAT项中的值为结束标志（FFFFFFOF)</li><li>该FAT项映射的簇被某个文件占用，但并不是文件的最后一个簇，那么该FAT项中的值是文件下一个簇的簇号</li></ul><h2 id="4-FAT32文件系统的数据区分析"><a href="#4-FAT32文件系统的数据区分析" class="headerlink" title="4.FAT32文件系统的数据区分析"></a>4.FAT32文件系统的数据区分析</h2><h3 id="数据区的位置"><a href="#数据区的位置" class="headerlink" title="数据区的位置"></a>数据区的位置</h3><ol><li>定位到DBR扇区</li><li>读取DBR的OEH~OFH偏移处，得到”DBR保留扇区”</li><li>读取DBR的24H~27H偏移处，得到”每FAT扇区数”</li><li>数据的位置&#x3D;DBR保留扇区数+2*每FAT扇区数</li></ol><h3 id="数据区的内容"><a href="#数据区的内容" class="headerlink" title="数据区的内容"></a>数据区的内容</h3><p>FAT32文件系统数据区的内容主要由三部分组成：根目录、子目录和文件内容。在数据区中是以“簇”为单位来管理这段空间。</p><h2 id="5-FAT32文件系统目录项分析"><a href="#5-FAT32文件系统目录项分析" class="headerlink" title="5.FAT32文件系统目录项分析"></a>5.FAT32文件系统目录项分析</h2><p>在FAT32文件系统下，分区根目录下的文件及文件夹的目录项存放在根目录区中，分区子目录下的文件及文件夹的目录项存放在子目录区中，根目录区和子目录区都在数据区中。</p><p>FAT32目录项可以分为四类：</p><ol><li><h3 id="短文件名目录项"><a href="#短文件名目录项" class="headerlink" title="短文件名目录项"></a>短文件名目录项</h3><p><img src="https://s2.loli.net/2022/04/26/Pg5jBxaoyLqR2h1.png" alt="image-20220426193655242"></p></li><li><h3 id="长文件名目录项"><a href="#长文件名目录项" class="headerlink" title="长文件名目录项"></a>长文件名目录项</h3><ol><li><p>系统取长文件名的前6个字符加上“~1”形成短文件名，扩展名不变</p></li><li><p>如果已存在这个名字的文件，则符号“~”后的数字自动增加</p></li><li><p>如果有非法的字符，则以下划线”_”替代</p></li><li><p>如果文件名很长，一个长文件就需要多个目录项，这些目录项按倒序排列在其短文件名目录项之前</p><p><img src="https://s2.loli.net/2022/04/26/LRBPeVDFjl1wv9m.png" alt="image-20220426193744723"></p><p>winhex模板显示</p><p>​<img src="https://s2.loli.net/2022/04/26/TLSk2RgCMxNlWfH.png" alt="image-20220426193758219"></p></li></ol><p></p></li><li><h3 id="“-”目录项和”-”目录项"><a href="#“-”目录项和”-”目录项" class="headerlink" title="“.”目录项和”..”目录项"></a>“.”目录项和”..”目录项</h3><ol><li><p>“.”表示当前目录</p><p>2E 20 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F </p><p>3F 3F 3F 3F 00 00 3F 3F 3F 3F 00 00 00 00 00 00</p></li><li><p>“..”表示上级目录</p><p>2E 2E 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F </p><p>3F 3F 3F 3F 00 00 3F 3F 3F 3F 00 00 00 00 00 00</p></li><li><p>卷标目录项</p><ol><li>对于FAT格式的分区，卷标的长度最多允许达到11字节，如果卷标为中文，则最多支持5个字符</li><li>卷标的目录项不记录起始簇号和大小</li><li>卷标的目录项不记录创建时间和最后访问时间，只记录修改时见&#x3D;间</li></ol></li></ol></li></ol><h2 id="6-FAT32文件系统根目录与子目录的管理"><a href="#6-FAT32文件系统根目录与子目录的管理" class="headerlink" title="6.FAT32文件系统根目录与子目录的管理"></a>6.FAT32文件系统根目录与子目录的管理</h2><h3 id="1-根目录的管理"><a href="#1-根目录的管理" class="headerlink" title="1.根目录的管理"></a>1.根目录的管理</h3><p>通过根目录找到文件的数据区：</p><ol><li>通过分区表定位分区一的开始位置，即该位置为这个分区的DBR扇区</li><li>通过”DBR保留扇区”、”每FAT扇区数”两个参数计算出根目录的开始扇区</li><li>通过文件名定位到目标文件的目录项，在目录中计算数据区所在的簇号</li><li>通过簇号转跳到数据区所在的扇区</li></ol><h3 id="2-子目录的管理"><a href="#2-子目录的管理" class="headerlink" title="2.子目录的管理"></a>2.子目录的管理</h3><ol><li>先找到根目录，根据根目录的簇号来定位到根目录的数据区</li><li>在根目录的数据区中搜索子目录的文件名</li><li>找到子目录的文件后再根据子目录的高低簇来找到子目录的数据区</li></ol><h2 id="7-FAT32文件系统删除文件分析"><a href="#7-FAT32文件系统删除文件分析" class="headerlink" title="7.FAT32文件系统删除文件分析"></a>7.FAT32文件系统删除文件分析</h2><h3 id="文件删除后的变化："><a href="#文件删除后的变化：" class="headerlink" title="文件删除后的变化："></a>文件删除后的变化：</h3><ul><li>文件目录项第一个字节被改为E5，文件名其他字节没有变化</li><li>文件高位簇2个字节清零</li><li>文件大小字节没有改变</li><li>文件FAT表的簇已经清零</li></ul><h3 id="文件删除后的恢复："><a href="#文件删除后的恢复：" class="headerlink" title="文件删除后的恢复："></a>文件删除后的恢复：</h3><p>​将被删除的文件的数据区的内容全部选中，并另存为一个新文件重命名即可将被删除的文件恢复出来。</p><h3 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h3><ul><li>如果文件在数据区中存放的位置比较靠后，文件起始簇号就会很大，那么文件目录项中记录文件起始簇号的高位两个字节就会有数据，当文件删除时，这两个字节会被清零，该文件的起始簇号值也就丢失了，这种删除的文件比较难恢复。</li><li>文件删除后，其FAT表中的簇链也会清零，如果文件有碎片，也就是不连续存放，这种删除的文件也比较难恢复。</li><li>文件删除后，虽然文件的内容并不会被清除，但其所占用的簇会释放，这些簇就很容易被其他文件进一步占用，这样就覆盖了被删除文件的数据，这种情况下的数据将无法恢复。</li></ul><h2 id="8-FAT32文件系统删除文件后目录项起始簇号高位清零的情况"><a href="#8-FAT32文件系统删除文件后目录项起始簇号高位清零的情况" class="headerlink" title="8.FAT32文件系统删除文件后目录项起始簇号高位清零的情况"></a>8.FAT32文件系统删除文件后目录项起始簇号高位清零的情况</h2><ul><li>将文件先放入回收站，在清空回收站，这种删除方法不清楚文件目录项中起始簇号高位的两个字节</li><li>将文件用shift+delete组合键直接彻底删除，这种删除方法将清除文件目录项中起始簇号高位的两个字节</li><li>将文件用shift+delete组合键直接彻底扇区，这种删除方法将清楚文件夹的目录项中起始簇号高位的两个字节，而文件夹里面的文件目录项起始簇号高位的两个字节并不清空。</li></ul><h3 id="文件目录项起始簇号高位清零后的恢复方法："><a href="#文件目录项起始簇号高位清零后的恢复方法：" class="headerlink" title="文件目录项起始簇号高位清零后的恢复方法："></a>文件目录项起始簇号高位清零后的恢复方法：</h3><ul><li><p>文件删除后，文件的创建时间，修改时间并不改变，所以可以寻找与被删除文件创建时间十分相近的文件，参考他们的起始簇号高位的两个字节</p></li><li><p>穷举法：</p><ol><li><p>点击被删除文件然后将文件所在的扇区号进行复制，再将复制的扇区号复制到跳至扇区扇区的位置，然后下面簇的框中显示的就是低位簇的结果。</p></li><li><p>用假设法假设高位簇为1，那么就是1乘以65563等于65536（注：每加一个簇那么就要在原有的基础上再加一个1乘以65536，以此类推）</p><p>高位簇公式：用低位簇的数值加上假设的数（注：再假设高位簇的时候只能在原有的1x65536上叠加一个1x65536）。例如：低位簇为：18344       高位簇假设为1那么高位簇就是1x65536；18344+65536&#x3D;83880；  如果假设高位簇为2，那么就是83880+1x65536&#x3D;149416就这样以此类推直到找到为止</p></li><li><p>将算出的结果复制到跳至扇区簇的框中进行跳转看是否在这个簇里面，如果没有在里面，那么再找下一个簇。（注：我们在这里算出的结果是簇的结果而不是扇区的）。</p></li><li><p>找到后将数据提取出来就可以了（注：如果要它的字节数，那么就用字符转换器将汉字会英文转换成十六进制，然后查找到后，到1C位置查看字节数）。</p></li></ol></li></ul><h2 id="9-FAT32文件系统误格式化的分析"><a href="#9-FAT32文件系统误格式化的分析" class="headerlink" title="9.FAT32文件系统误格式化的分析"></a>9.FAT32文件系统误格式化的分析</h2><h3 id="格式化后数据的变化："><a href="#格式化后数据的变化：" class="headerlink" title="格式化后数据的变化："></a>格式化后数据的变化：</h3><ul><li>FAT表除了0号FAT项、1号FAT项和2号FAT项以外已被完全清空</li><li>根目录项被完全清零</li><li>子目录项的下的文件的目录项还存在</li></ul><h3 id="格式化之后的文件恢复方法："><a href="#格式化之后的文件恢复方法：" class="headerlink" title="格式化之后的文件恢复方法："></a>格式化之后的文件恢复方法：</h3><ol><li>找到子目录下文件的目录项</li><li>计算文件的簇号</li><li>根据簇号跳转到扇区，即可找到文件的数据区</li><li>选择跟文件大小相同的字节，选择另外保存，即可将文件恢复</li></ol><h2 id="10-FAT32系统DBR破坏的恢复"><a href="#10-FAT32系统DBR破坏的恢复" class="headerlink" title="10.FAT32系统DBR破坏的恢复"></a>10.FAT32系统DBR破坏的恢复</h2><p>系统提示分区未格式化，显然是文件系统遭到破坏，winhex无法打开分区，可以断定DBR一定有错误。可以使用winhex打开分区所在的硬盘，然后跳转到该硬盘的DBR扇区。</p><h3 id="恢复方法："><a href="#恢复方法：" class="headerlink" title="恢复方法："></a>恢复方法：</h3><p>FAT32分区的DBR有一个备份，在分区的6号扇区，只要把这个备份找到并且复制过来就可以了。</p><h2 id="11-FAT32分区文件乱码的手工恢复"><a href="#11-FAT32分区文件乱码的手工恢复" class="headerlink" title="11.FAT32分区文件乱码的手工恢复"></a>11.FAT32分区文件乱码的手工恢复</h2><h3 id="数据丢失的原因："><a href="#数据丢失的原因：" class="headerlink" title="数据丢失的原因："></a>数据丢失的原因：</h3><p>文件系统把不是目录项的数据当成目录项读取。打开分区只能看到乱码</p><h3 id="数据恢复的思路和方法"><a href="#数据恢复的思路和方法" class="headerlink" title="数据恢复的思路和方法"></a>数据恢复的思路和方法</h3><p>思路：手工建一个目录项，指向用户的子目录</p><p>方法一：</p><p>搜索这些文件的目录项，找到它们的子目录。</p><p>方法二：</p><ol><li><p>点击文件夹所在的数据区</p></li><li><p>数据区内的数据显示的是一堆乱码（子目录和父目录的正常格式：子目录开头用2E 20 20 20 20 20 20 20 20 20 20开头；父目录用2E 2E 20 20 20 20 20 20 20 20 20 开头）</p></li><li><p>看文件夹在哪个簇号的方法：点击变成乱码的文件夹，然后将文件夹所在的扇区号复制到跳至扇区的框中，下面的结果就是为文件夹所在的簇号</p></li><li><p>然后将簇号放到计算器中将十进制转换为十六进制</p></li><li><p>搜索父目录在2B 7C的所有父目录 方法：找一个部分为0的扇区将它们填为“2E 2E 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F 3F 3F 3F 3F 00 00 3F 3F 3F 3F 7C 2B”（注：因为在winhex中的数值与外界的数值是相反的；又因为数值是从低位簇开始填写的，所以这里高位簇为0）。</p><p>7C 2B为高位簇</p></li><li><p>复制选块为十六进制，在查找十六进制数值里进行搜索–勾上通配符、全部搜索、偏移条件：512&#x3D;32，列出搜索结果</p></li><li><p>将搜索到的子目录高低位簇做记录</p></li><li><p>然后点击变乱码的文件夹将文件夹的数据区清零，然后再将虚拟的子目录复制到文件夹的数据区中，再将记录好的高低位簇填入到虚拟子目录中</p></li></ol><p>如果文件直接在根目录下或者直接在变成乱码的文件中，恢复方式：</p><p>1.搜索文件的开头4个字节</p><p>2.复制开头的4个字节粘贴到查找16进制数值里面去搜索</p><p>3.搜索到后将数据提取出来就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据恢复" scheme="https://github.com/HKingDragon/hkingdragon.github.io/categories/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
    
    <category term="文件系统" scheme="https://github.com/HKingDragon/hkingdragon.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>NTFS文件系统</title>
    <link href="https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-04-26T10:07:55.000Z</published>
    <updated>2022-04-26T11:41:40.929Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=29809963&auto=1&height=66"></iframe><h1 id="NTFS文件系统"><a href="#NTFS文件系统" class="headerlink" title="NTFS文件系统"></a>NTFS文件系统</h1><h2 id="NTFS文件系统基本介绍"><a href="#NTFS文件系统基本介绍" class="headerlink" title="NTFS文件系统基本介绍"></a>NTFS文件系统基本介绍</h2><p><a href="https://www.dgxue.com/huifu/tag/ntfs/">NTFS</a><a href="https://www.dgxue.com/huifu/tag/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/">文件系统</a>是随着Windows NT操作系统的诞生而产生的，并随着Windows NT 4跨入主力文件系统的行列。它的优点是安全性和稳定性极其出色，在使用中不易产生文件碎片；同时它还提供了容错结构日志，可以将用户的操作全部记录下来，从而保护了系统的安全。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>安全性</p></li><li><p>可恢复性</p></li><li><p>文件压缩</p></li><li><p>磁盘配额</p></li><li><p>B+树的文件管理</p><p>NTFS利用B＋树文件管理方法来跟踪文件在磁盘上的位置。在NTFS中文件名顺序存放，因而查找速度更快。如果卷比较大，B＋树会在宽度上增长，而不会在深度上增长，因此，当目录增大时，NTFS并没有显示出明显的性能下降。</p><p><img src="https://s2.loli.net/2022/04/26/U1sfOPLvzZxtaFm.png" alt="image-20220425090847401"></p></li></ol><h2 id="NTFS文件系统结构总览"><a href="#NTFS文件系统结构总览" class="headerlink" title="NTFS文件系统结构总览"></a>NTFS文件系统结构总览</h2><p>NTFS分区也被称为NTFS卷，卷上簇的大小，又称为卷因子，其大小是用户在创建NTFS卷时确定的。簇的大小一定是扇区大小的整数倍，通常是2n（n为整数）。</p><center><b>NTFS卷大小和簇大小关系表</b></center><table><thead><tr><th>卷大小（MB）</th><th>每簇的扇区</th><th>默认的簇大小</th></tr></thead><tbody><tr><td>≤512</td><td>1</td><td>512个字节</td></tr><tr><td>513～1024</td><td>2</td><td>1024个字节（1KB）</td></tr><tr><td>1025～2048</td><td>4</td><td>2048个字节（2KB）</td></tr><tr><td>≥2049</td><td>8</td><td>4KB</td></tr></tbody></table><p>NTFS文件系统使用了逻辑簇号（Logical Cluster Number，LCN）和虚拟簇号（Virtual Cluster Number，VCN）对卷进行管理。LCN是对卷的第一个簇到最后一个簇进行编号，只要知道LCN号和簇的大小以及NTFS卷在物理磁盘中的起始扇区（绝对扇区）就可以对簇进行定位，而这些信息在NTFS卷的引导扇区中可以找到（BPB参数）。找到簇在磁盘中的物理位置的计算公式是：</p><center>每簇扇区数×簇号＋卷的隐含扇区数（卷之前的扇区总数）＝簇的起始绝对扇区号</center><p>虚拟簇号（VCN）则是将特定文件的簇从头到尾进行编号，这样做的原因是方便系统对文件中的数据进行引用，VCN并不要求在物理上是连续的，要确定VCN的磁盘上的定位需先将其转换为LCN。</p><p>NTFS的第一个扇区为引导扇区，即DBR扇区。</p><p>在分区的第一个扇区（引导扇区DBR）后是15个扇区的NTLDR区域，这16个扇区共同构成$BOOT文件。在NTLDR后（但不一定是物理上相连的）是主文件表（Master File Table，MFT）区域，主文件表由文件记录构成，每个文件记录占2个扇区，文件记录简称为FR（File Record）。在FAT文件系统中是通过FAT表和文件目录项存储文件数据和记录文件的文件名、扩展名、建立时间、访问时间、修改时间、文件属性、文件大小、文件在磁盘中所占用的簇等信息进行管理的，而在NTFS文件系统中这些信息被称为属性，包括文件的内容在NTFS中也称为属性，各种属性被放入文件记录中进行管理。</p><p>NTFS文件系统的主文件表中还记录了一些非常重要的系统数据，这些数据被称为元数据（metadata）文件，简称为“元文件”，其中包括了用于文件定位和恢复的数据结构、引导程序数据及整个卷的分配位图等信息。NTFS文件系统将这些数据都当作文件进行管理，这些文件用户是不能访问的，它们的文件名的第一个字符都是“$”，表示该文件是隐藏的。在NTFS文件系统中，这样的文件主要有16个。</p><ul><li>MFT本身（$Mft）</li><li>MFT镜像（$MftMirr）</li><li>日志文件（$LogFile）</li><li>卷文件（$Volume）</li><li>属性定义表（$AttrDef）</li><li>根目录（$Root）</li><li>位图文件（$Bitmap）</li><li>引导文件（$Boot）</li><li>坏簇文件（$BadClus）</li><li>安全文件（$Secure）</li><li>大写文件（$UpCase）</li><li>扩展元数据文件（$Extended metadata directory）</li><li>重解析点文件（$Extend&#x2F;$Reparse）</li><li>变更日志文件（$Extend&#x2F;$UsnJrnl）</li><li>配额管理文件（$Extend&#x2F; $Quota）</li><li>对象ID文件（$Extend&#x2F;$ObjId）等</li></ul><p>这16个元数据文件总是占据着MFT的前16项记录，在这16项以后就是用户建立的文件和文件夹的记录了。</p><p>每个文件记录在主文件表中占据的磁盘空间一般为1KB，也就是两个扇区，NTFS文件系统分配给主文件表的区域大约占据了磁盘空间的12.5％，剩余的磁盘空间用来存放其他元文件和用户的文件。</p><center><b>NTFS文件系统的大致结构</b></center><p><img src="https://s2.loli.net/2022/04/26/pY6X2TnhNEiKu5I.png" alt="image-20220425091814165"></p><p><b>注：在NTFS文件系统所在分区的最后一个扇区是DBR的备份，但该扇区并不属于NTFS文件系统。</b></p><h2 id="NTFS文件系统引导扇区分析"><a href="#NTFS文件系统引导扇区分析" class="headerlink" title="NTFS文件系统引导扇区分析"></a>NTFS文件系统引导扇区分析</h2><p><a href="https://www.dgxue.com/huifu/tag/ntfs/">NTFS</a>文件系统的<a href="https://www.dgxue.com/huifu/tag/%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA/">引导扇区</a>是$Boot的第一个扇区，它的结构与FAT文件系统的DBR类似，所以习惯上也称该扇区为DBR扇区。DBR扇区在操作系统的引导过程起着非常重要的作用，如果这个扇区遭到破坏，系统将不能正常启动。</p><p>NTFS文件系统的DBR扇区与FAT文件系统的结构一样，也包括跳转指令、OEM代号、BPB参数、引导程序和结束标志。</p><center><b>NTFS文件系统的DBR扇区</b></center><p><img src="https://s2.loli.net/2022/04/26/fcJlYXUVZjG8m2i.png" alt="image-20220425092102932"></p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>跳转指令本身占用2字节，它将程序执行流程跳转到引导程序处。例如，当前DBR中的“EB 52”，就是代表汇编语言的“JMP 52”。</p><blockquote><p>注意：该指令本身占用2字节，计算跳转目标地址时以该指令的下一字节为基准，所以实际执行的下一条指令应该位于54H。紧接着跳转指令的是一条空指令NOP（90H）。</p></blockquote><h3 id="OEM代号"><a href="#OEM代号" class="headerlink" title="OEM代号"></a>OEM代号</h3><p>这部分占8字节，其内容由创建该文件系统的OEM厂商具体安排。例如，微软的Windows系统将此处直接设置为“NTFS”，在NTFS文件系统中也称为“文件系统ID”。</p><h3 id="BPB（BIOS参数块）"><a href="#BPB（BIOS参数块）" class="headerlink" title="BPB（BIOS参数块）"></a>BPB（BIOS参数块）</h3><p>BPB是BIOS Parameter Block的缩写，其含义为BIOS参数块。BPB从DBR的第12（0BH偏移处）个字节开始，到偏移53H结束，占用73个字节，记录了有关该文件系统的重要信息</p><center><b>NTFS文件系统BPB参数的含义</b></center><p><img src="https://s2.loli.net/2022/04/26/FoIJQZyYUHk1KXa.png" alt="image-20220425104726046"></p><center><b>NTFS的DBR参数模板</b></center><p><img src="https://s2.loli.net/2022/04/26/tiCPvyuVW3JhpBd.png" alt="image-20220425104820856"></p><ol><li>0BH～0CH：每扇区字节数</li></ol><p>​每扇区字节数记录每个逻辑扇区的大小，其常见值为512字节，但512并不是固定值，该值可以由程序定义，合法值包括512字节、1024字节、2048字节和4096字节。</p><ol start="2"><li>0DH～0DH：每簇扇区数</li></ol><p>​每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇。</p><p>​如果这个分区是在系统安装前被格式化而来的，一般大于2GB的分区每簇默认占用8个扇区，也就是每簇大小为4KB，这个字节的内容就为十六进制值“08”。如果这个分区是由一个FAT分区转换而来，则每个簇一般占用1个扇区的空间，也就是每簇大小为512字节，这个字节的内容就是“01H”。</p><p>​在NTFS文件系统中所有的簇从0开始进行编号，每个簇都有一个自己的地址编号，并且从分区的第一个扇区就开始编簇。</p><ol start="3"><li>0EH～0FH：DBR保留扇区数</li></ol><p>​NTFS文件系统中DBR没有保留扇区，该值常为“0000”。</p><ol start="4"><li>10H～12H：总是0</li></ol><p>​这3个字节总是“00 00 00”。</p><ol start="5"><li>13H～14H：未用</li></ol><p>​这两个字节不用。</p><ol start="6"><li>15H～15H：介质描述符</li></ol><p>​这个字节为介质描述字节，一般硬盘为“F8H”；双面5.25英寸软盘为“F9H”；双面3.5英寸软盘RAM虚拟盘为“FAH”；3.5英寸、1.44MB的软盘一般为“F0H”。因为NTFS分区一定在硬盘上，所以此处常为16进制数“F8”。</p><ol start="7"><li>16H～17H：未用</li></ol><p>​这两个字节不用。</p><ol start="8"><li>18H～19H：每磁道扇区数</li></ol><p>​这是逻辑C&#x2F;H&#x2F;S中的一个参数，其值一般为63，NTFS已经不用此参数。</p><ol start="9"><li>1AH～1BH：磁头数</li></ol><p>​这是逻辑C&#x2F;H&#x2F;S中的一个参数，其值一般为255，NTFS已经不用此参数。</p><ol start="10"><li>1CH～1FH：隐藏扇区数</li></ol><p>​隐藏扇区数是指本分区之前使用的扇区数，该值与分区表中所描述的该分区的起始扇区号一致。对于主磁盘分区来讲，是MBR到该分区DBR之间的扇区数；对于扩展分区中的逻辑驱动器来讲，是其EBR到该分区DBR之间的扇区数。</p><ol start="11"><li>20H～23H：未用</li></ol><p>​这4字节不用。</p><ol start="12"><li>24H～27H：未用</li></ol><p>​这4字节不用，但总为80008000。</p><ol start="13"><li>28H～2FH：扇区总数</li></ol><p>​扇区总数是指分区的总扇区数。NTFS的BPB中记录的分区大小比分区表中记录的少一个扇区，因为分区最后一个扇区留给DBR备份使用了。</p><ol start="14"><li>30H～37H：$MFT的起始簇号</li></ol><p>​这8字节为$MFT的起始簇号，注意这个位置使用簇号定义的，而不是扇区号，并且该地址不是固定值。</p><ol start="15"><li>38H～3FH：$MFTMirr的起始簇号</li></ol><p>​这8字节为$MFTMirr的起始簇号，这个位置也使用簇号定义，而不是扇区号。$MFTMirr的地址也不是固定值的，可以在$MFT之后，也可以在$MFT之前。本例中，$MFTMirr的地址就在$MFT之前。</p><ol start="16"><li>40H～40H：文件记录的大小描述</li></ol><p>​这一个字节描述每个文件记录的簇数。注意该参数为带符号数，当其是负数时，说明每个文件记录的大小要小于每簇扇区数，在这种情况下，文件记录的大小用字节数表示，计算方法为：2-1×每个文件记录的簇数。例如，图4-401的DBR中该参数值为“F6H”，换算为十进制等于“-10”，所以每个文件记录的大小是2-1×-10＝210＝1024字节。</p><ol start="17"><li>41H～43H：未用</li></ol><p>​这3字节不用。</p><ol start="18"><li>44H～44H：索引缓冲的大小描述</li></ol><p>​这一个字节描述每个索引缓冲的簇数。注意该参数也是带符号数，当其是负数时，说明每个索引缓冲的大小要小于每簇扇区数，在这种情况下，索引缓冲的大小用字节数表示，计算方法为：2-1×每个索引缓冲的簇数。</p><ol start="19"><li>45H～47H：未用</li></ol><p>​这3字节不用。</p><ol start="20"><li>48H～4FH：卷序列号</li></ol><p>​这8字节为分区的逻辑序列号，也就是在命令行下输入DIR命令后显示的一排数据，这个序列号是硬盘格式化时随机产生的。</p><ol start="21"><li>50H～51H：校验和</li></ol><p>​BPB的最后四个字节是其校验和，一般都为0。</p><h3 id="引导程序"><a href="#引导程序" class="headerlink" title="引导程序"></a>引导程序</h3><p>NTFS的DBR引导程序占用426字节（54H～1FDH），其负责完成将系统文件NTLDR装入。对于一个没有安装操作系统的分区来讲，这段程序没有用处。</p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p>NTFS的DBR引导程序占用426字节（54H～1FDH），其负责完成将系统文件NTLDR装入。对于一个没有安装操作系统的分区来讲，这段程序没有用处。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>以上5个部分共占用512字节，正好是1个扇区，这个扇区属于$BOOT文件的组成部分。该部分的内容中除了第5部分结束标志是固定不变之外，其余4部分都是不完全确定的，都因操作系统版本的不同而不同，也因硬盘的逻辑盘参数的变化而变化。</p></blockquote><h2 id="元文件-MFT分析"><a href="#元文件-MFT分析" class="headerlink" title="元文件$MFT分析"></a>元文件$MFT分析</h2><h3 id="NTFS文件系统的元文件"><a href="#NTFS文件系统的元文件" class="headerlink" title="NTFS文件系统的元文件"></a>NTFS文件系统的元文件</h3><p>在NTFS文件系统中，元文件主要有16个，包括MFT（<a href="https://www.dgxue.com/huifu/tag/mft/">$MFT</a>）、MFT镜像（$MFTMirr）、日志文件（$LogFile）、卷文件（$Volume）、属性定义表（$AttrDef）、根目录（$Root）、位图文件（$Bitmap）、引导文件（$Boot）、坏簇文件（$BadClus）、安全文件（$Secure）、大写文件（$UpCase）、扩展元数据文件（$Extended metadata directory）、重解析点文件（$Extend&#x2F;$Reparse）、变更日志文件（$Extend&#x2F;$UsnJrnl）、配额管理文件（$Extend&#x2F; $Quota）、对象ID文件（$Extend&#x2F;$ObjId）等，表4-30详细列出了这些元文件及它们的作用。</p><center><b>NTFS文件系统的元文件</b></center><table><thead><tr><th>序号</th><th>元文件</th><th>功能</th></tr></thead><tbody><tr><td>0</td><td>$MFT</td><td>主文件表本身，是每个文件的索引</td></tr><tr><td>1</td><td>$MFTMirr</td><td>主文件表的部分镜像</td></tr><tr><td>2</td><td>$LogFile</td><td>事务型日志文件</td></tr><tr><td>3</td><td>$Volume</td><td>卷文件，记录卷标等信息</td></tr><tr><td>4</td><td>$AttrDef</td><td>属性定义列表文件</td></tr><tr><td>5</td><td>$Root</td><td>根目录文件，管理根目录</td></tr><tr><td>6</td><td>$Bitmap</td><td>位图文件，记录了分区中簇的使用情况</td></tr><tr><td>7</td><td>$Boot</td><td>引导文件，记录了用于系统引导的数据情况</td></tr><tr><td>8</td><td>$BadClus</td><td>坏簇列表文件</td></tr><tr><td>9</td><td>$Quota（NTFS4）</td><td>在早期的Windows NT系统中此文件为磁盘配额信息</td></tr><tr><td>10</td><td>$Secure</td><td>安全文件</td></tr><tr><td>11</td><td>$UpCase</td><td>大小写字符转换表文件</td></tr><tr><td>12</td><td>$Extend metadata directory</td><td>扩展元数据目录</td></tr><tr><td>13</td><td>$Extend&#x2F;$Reparse</td><td>重解析点文件</td></tr><tr><td>14</td><td>$Extend&#x2F;$UsnJrnl</td><td>加密日志文件</td></tr><tr><td>15</td><td>$Extend&#x2F;$Quota</td><td>配额管理文件</td></tr><tr><td>16</td><td>$Extend&#x2F;$ObjId</td><td>对象ID文件</td></tr></tbody></table><h3 id="MFT文件介绍"><a href="#MFT文件介绍" class="headerlink" title="$MFT文件介绍"></a>$MFT文件介绍</h3><p>在NTFS文件系统中，磁盘上的所有数据都是以文件的形式出现的，即使是文件系统的管理信息也是以一组文件的形式存储的，即元文件。16个元文件中主文件表（$MFT）是一个非常重要的元文件，它由文件记录构成，每个文件记录占用2个扇区。</p><p>每个文件都有一个文件记录，包括元文件本身，而主文件表（$MFT）就是专门用来存储文件记录的一个元文件，在$MFT中前16个文件记录总是元文件的纪录。</p><p>由于$MFT文件本身的重要性，为了确保文件系统结构的可靠性，系统专门为它准备了一个镜像文件（$MFTMirr），也就是$MFT中的第2个记录。</p><p>$MFT中前16个文件记录总是元文件的记录，并且这16个文件记录的顺序是固定的，下面对这16个记录简单做一个介绍：</p><p>第1个记录就是$MFT自身的记录，也就是说$MFT首先对自己进行管理。</p><p>第2个记录是$MFTMirr的记录，也就是$MFT前4个文件记录的镜像。</p><p>第3个记录是日志文件（$LogFile）的记录，该文件是NTFS为实现可恢复性和安全性而设计的。当系统运行时，NTFS就会在日志文件中记录所有影响NTFS卷结构的操作，包括文件的创建和改变目录结构的命令，从而可在系统失败时能够恢复NTFS卷。</p><p>第4个记录是卷文件（$Volume）的记录，它包含卷名、NTFS的版本和一个标明该磁盘是否损坏的标志位，NTFS文件系统以此决定是否需要调用Chkdsk程序来进行修复。</p><p>第5个记录是属性定义表（$AttrDef，attribute definition table）的记录，其中存放着卷所支持的所有文件属性，并指出它们是否可以被索引和恢复等。</p><p>第6个记录是根目录（$ROOT）的记录，其中保存着该卷根目录下的所有文件和目录的索引。在访问一个文件后，NTFS就保留该文件的MFT引用，第二次就能够直接访问该文件。</p><p>第7个记录是位图文件（$Bitmap）的记录，NTFS卷的簇使用情况都保存在这个位图文件中，其中每一位（bit）代表卷中的一簇，标识该簇是空闲还是已分配。由于该文件可以很容易被扩大，所以，NTFS的卷可以很方便地动态扩大，而FAT格式的文件系统由于涉及FAT表的变化，所以不能随意对分区大小进行调整。</p><p>第8个记录是引导文件（$Boot）的记录，该文件中存放着操作系统的引导程序代码。该文件必须位于特定的磁盘位置才能够正确地引导系统，一般都是位于卷的最前面。</p><p>第9个记录是坏簇文件（$BadClus）的记录，它记录着该卷中所有损坏的簇号，防止系统对其进行分配使用。</p><p>第10个记录是安全文件（$Secure）的记录，它存储着整个卷的安全描述符数据库。NTFS文件和目录都有各自的安全描述符，为节省空间，NTFS将文件和目录的相同描述符存放在此公共文件中。</p><p>第11个记录为大写文件（$UpCase，upper case file）的记录，该文件包含一个大小写字符转换表。</p><p>第12个记录是扩展元数据目录（$Extended metadata directory）的记录。</p><p>第13个记录是重解析点文件（$Extend&#x2F;$Reparse）的记录。</p><p>第14个记录是变更日志文件（$Extend&#x2F;$UsnJrnl）的记录。</p><p>第15个记录是配额管理文件（$Extend&#x2F;$Quota）的记录。</p><p>第16个记录是对象ID文件（$Extend&#x2F;$ObjId）的记录。</p><p>第17～23记录是系统保留的记录，暂时不用，用于将来扩展。</p><p>从第24个记录开始存放用户文件的记录。</p><h2 id="文件记录分析"><a href="#文件记录分析" class="headerlink" title="文件记录分析"></a>文件记录分析</h2><h3 id="文件记录的结构"><a href="#文件记录的结构" class="headerlink" title="文件记录的结构"></a>文件记录的结构</h3><p>MFT以文件记录来实现对文件的管路，每个文件记录都对应着不同的文件，大小固定为1KB，也就是占用两个扇区。存放文件记录位置的第一个记录就称作“基本文件记录”。文件记录在MFT中物理上是连续的，从0开始依次按顺序编号。</p><p>文件记录由两部分构成，一部分是文件记录头，另一部分是属性列表。</p><center><b>文件记录的结构</b></center><table><thead><tr><th>结构</th><th>说明</th></tr></thead><tbody><tr><td>文件记录头</td><td></td></tr><tr><td>属性1</td><td></td></tr><tr><td>属性2</td><td></td></tr><tr><td>……</td><td></td></tr><tr><td>结束标志</td><td>“FFFFFFFFH”</td></tr></tbody></table><h3 id="文件记录头的结构"><a href="#文件记录头的结构" class="headerlink" title="文件记录头的结构"></a>文件记录头的结构</h3><center><b>NTFS文件记录头信息</b></center><table><thead><tr><th>字节偏移</th><th>字段长度（字节）</th><th>字段名和含义</th></tr></thead><tbody><tr><td>0x00</td><td>4</td><td>MFT标志，一定为字符串“FILE”</td></tr><tr><td>0x04</td><td>2</td><td>更新序列号（Update Sequence Number）的偏移</td></tr><tr><td>0x06</td><td>2</td><td>更新序列号的大小与数组，包括第一个字节</td></tr><tr><td>0x08</td><td>8</td><td>日志文件序列号（$LogFile Sequence Number，LSN）</td></tr><tr><td>0x10</td><td>2</td><td>序列号（Sequence Number）</td></tr><tr><td>0x12</td><td>2</td><td>硬连接数（Hard Link Count），即有多少目录指向该文件</td></tr><tr><td>0x14</td><td>2</td><td>第一个属性的偏移地址</td></tr><tr><td>0x16</td><td>2</td><td>标志（Flag），00H表示文件被删除，01H表示文件正在使用，02H表示目录被删除，03H表示目录正在使用</td></tr><tr><td>0x18</td><td>4</td><td>文件记录的实际长度</td></tr><tr><td>0x1C</td><td>4</td><td>文件记录的分配长度</td></tr><tr><td>0x20</td><td>8</td><td>基本文件记录中的文件索引号</td></tr><tr><td>0x28</td><td>2</td><td>下一属性ID，当增加新的属性时，将该值分配给新属性，然后该值增加，如果MFT记录重新使用，则将它置0，第一个实例总是0</td></tr><tr><td>0x2A</td><td>2</td><td>边界，Windows XP中为偏移0x30处</td></tr><tr><td>0x2C</td><td>4</td><td>文件记录参考号，Windows XP中使用，Windows 2000中无此参数</td></tr><tr><td>0x30</td><td>2</td><td>更新序列号</td></tr><tr><td>0x32</td><td>4</td><td>更新数组</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据恢复" scheme="https://github.com/HKingDragon/hkingdragon.github.io/categories/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
    
    <category term="文件系统" scheme="https://github.com/HKingDragon/hkingdragon.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
