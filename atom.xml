<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon&#39;s Blog</title>
  
  
  <link href="https://github.com/HKingDragon/hkingdragon.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/HKingDragon/hkingdragon.github.io/"/>
  <updated>2022-04-29T12:07:33.027Z</updated>
  <id>https://github.com/HKingDragon/hkingdragon.github.io/</id>
  
  <author>
    <name>Dragon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux入门</title>
    <link href="https://github.com/HKingDragon/hkingdragon.github.io/2022/04/27/Linux%E5%85%A5%E9%97%A8/"/>
    <id>https://github.com/HKingDragon/hkingdragon.github.io/2022/04/27/Linux%E5%85%A5%E9%97%A8/</id>
    <published>2022-04-27T11:30:41.000Z</published>
    <updated>2022-04-29T12:07:33.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=480 height=86 src="https://music.163.com/outchain/player?type=2&id=1942041775&auto=1&height=66"></iframe><h1 id="Linux命令汇总"><a href="#Linux命令汇总" class="headerlink" title="Linux命令汇总"></a>Linux命令汇总</h1><h2 id="1-Linux的简介"><a href="#1-Linux的简介" class="headerlink" title="1.Linux的简介"></a>1.Linux的简介</h2><p>​Linux，全称GNU&#x2F;Linux，是一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872">类UNIX</a>操作系统，其内核由<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429">林纳斯·本纳第克特·托瓦兹</a>于1991年10月5日首次发布，它主要受到<a href="https://baike.baidu.com/item/Minix/7106045">Minix</a>和Unix思想的启发，是一个基于<a href="https://baike.baidu.com/item/POSIX">POSIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>和多<a href="https://baike.baidu.com/item/CPU">CPU</a>的操作系统。它能运行主要的<a href="https://baike.baidu.com/item/Unix/219943">Unix</a>工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D">64位</a>硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的<a href="https://baike.baidu.com/item/debian/748667">debian</a>、<a href="https://baike.baidu.com/item/archlinux/10857530">archlinux</a>，和基于商业开发的[Red Hat Enterprise Linux](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat Enterprise Linux&#x2F;10770503)、<a href="https://baike.baidu.com/item/SUSE/60409">SUSE</a>、[Oracle Linux](<a href="https://baike.baidu.com/item/Oracle">https://baike.baidu.com/item/Oracle</a> Linux&#x2F;6876458)等。</p><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li><p><strong>基本思想</strong></p><p>Linux的基本思想有两点：第一，一切都是文件；第二，每个文件都有确定的用途。其中第一条详细来讲就是系统中的所有都归结为一个文件，包括<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4">命令</a>、<a href="https://baike.baidu.com/item/%E7%A1%AC%E4%BB%B6">硬件</a>和<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>设备、<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>、<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B">进程</a>等等对于操作系统<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。</p></li><li><p><strong>完全免费</strong></p><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98/62748">程序员</a>参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p></li><li><p><strong>完全兼容POSIX1.0标准</strong></p><p>这使得可以在Linux下通过相应的<a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E5%99%A8">模拟器</a>运行常见的<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>、Windows的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。</p></li><li><p><strong>多用户、多任务</strong></p><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1">多任务</a>则是现代电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</p></li><li><p><strong>良好的界面</strong></p><p>Linux同时具有字符界面和<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/8146283">图形界面</a>。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。</p></li><li><p><strong>支持多种平台</strong></p><p>Linux可以运行在多种硬件平台上，如具有<a href="https://baike.baidu.com/item/x86/6150538">x86</a>、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001年1月份发布的Linux 2.4版内核已经能够完全支持<a href="https://baike.baidu.com/item/Intel/125450">Intel</a>64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。</p></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>Linux由众多微内核组成，其源代码完全开源；</p></li><li><p>Linux继承了<a href="https://baike.baidu.com/item/Unix/219943">Unix</a>的特性，具有非常强大的网络功能，其支持所有的因特网协议，包括TCP&#x2F;<a href="https://baike.baidu.com/item/IPv4/422599">IPv4</a>、<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>&#x2F;IPv6和链路层拓扑程序等，且可以利用Unix的网络特性开发出新的协议栈；</p></li><li><p>Linux系统工具链完整，简单操作就可以配置出合适的开发环境，可以简化开发过程，减少开发中仿真工具的障碍，使<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F/479832">系统</a>具有较强的移植性；</p></li></ol><h3 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h3><p>内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><p>Linux内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：</p><ul><li><p>稳定版：</p><p>具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些bug或加入一些新的驱动程序。</p></li><li><p>开发版：</p><p>由于要试验各种解决方案，所以变化很快。</p><p>内核源码网址：<a href="http://www.kernel.org/">http://www.kernel.org</a> 所有来自全世界的对Linux源码的修改最终都会汇总到这个网站，由Linus领导的开源社区对其进行甄别和修改最终决定是否进入到Linux主线内核源码中。</p></li></ul><h3 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h3><p>Linux发行版 (也被叫做 GNU&#x2F;Linux 发行版) 通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h3 id="Linux与Windows的区别"><a href="#Linux与Windows的区别" class="headerlink" title="Linux与Windows的区别"></a>Linux与Windows的区别</h3><ul><li><p>Linux区分大小写，Windows在DOS界面命令下不区分大小写</p></li><li><p>文件系统区别</p><p>在 Windows 下，打开 “计算机”，我们看到的是一个个的驱动器盘符：</p></li></ul><p><img src="https://s2.loli.net/2022/04/28/kSVhvgiKcWRCmYX.png" alt="image-20220428092049606"></p><p>​每个驱动器都有自己的<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>结构</p><p>​<img src="https://s2.loli.net/2022/04/28/sD6YBLMpgwV3aoZ.png" alt="在这里插入图片描述"></p><ul><li>在 Linux 下，我们是看不到这些驱动器盘符，我们看到的是文件夹（目录）：<br>linux没有盘符这个概念，只有一个根目录 &#x2F;，所有文件都在它下面</li></ul><p><img src="https://s2.loli.net/2022/04/28/1bzfwZLSVpdJMHq.png" alt="在这里插入图片描述"></p><ul><li><p>Linux所有内容均以文件形式保存包括硬件，用户。Windows文件和硬件没有关系，两个之间没有关联</p></li><li><p>Windows用扩展名区分文件如.exe代表执行文件，.txt代表文本文件，而Linux无扩展名，为了管理员区分会有部分扩展</p></li><li><p>windows平台:数量和质量的优势，不过大部分为收费软件；由微软官方提供重要支持和服务 。</p><p>linux平台：大都为开源自由软件，用户可以修改定制和再发布，由于基本免费没有资金支持，部分软件质量和体验欠缺；有全球所有的Linux开发者和自由软件社区提供支持。</p></li><li><p>windows下的.exe文件不能直接在linux下安装与运行，同时linux大部分是字符界面，大大增加了linux系统的安全性，减少了木马攻击的可能性，同时linux字符界面占用的系统资源要小于windows下的图形界面所占的资源。</p></li></ul><h2 id="文件目录介绍"><a href="#文件目录介绍" class="headerlink" title="文件目录介绍"></a>文件目录介绍</h2><ul><li><p><code>/</code>：</p><p>根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。</p></li><li><p><code>/bin</code>：</p><p>&#x2F;user&#x2F;bin：可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等</p></li><li><p><code>/boot</code>：</p><p>放置Linux系统启动时用的一些文件，如Linux的内核文件：&#x2F;boot&#x2F;vmlinuz，系统引导管理器：&#x2F;boot&#x2F;grub</p></li><li><p><code>/dev</code>：</p><p>存放在Linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，通常是挂载光驱</p></li><li><p><code>/etc</code>：</p><p>系统配置文件存放的目录</p></li><li><p><code>/home</code>：</p><p>系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，表示当前用户的家目录，edu表示用户edu的家目录</p></li><li><p><code>/lib</code>：</p><p>&#x2F;usr&#x2F;lib：&#x2F;usr&#x2F;local&#x2F;lib：系统使用的函数库目录。程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</p></li><li><p><code>/lost+fount</code>：</p><p>系统异常产生错误时，会将一些遗失的片段放置于此目录下</p></li><li><p><code>/mnt</code>：<code>/media</code>：</p><p>光盘默认挂载点，通常光盘挂载于&#x2F;mnt&#x2F;cdrom下</p></li><li><p><code>/opt</code>：</p><p>给主机额外安装软件所摆放的目录</p></li><li><p><code>/proc</code>：</p><p>此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有&#x2F;proc&#x2F;cpuinfo、&#x2F;proc&#x2F;interrupts、&#x2F;proc&#x2F;dma、&#x2F;proc&#x2F;ioports、&#x2F;proc&#x2F;net&#x2F;* 等。</p></li><li><p><code>/root</code>：</p><p>系统管理员root的家目录。</p></li><li><p><code>/sbin</code>:</p><p>&#x2F;usr&#x2F;sbin: &#x2F;usr&#x2F;local&#x2F;sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 &#x2F;bin 不同的是，这几个目录是给系统管理员 root使用的命令，一般用户只能”查看”而不能设置和使用。</p></li><li><p><code>/tmp</code>：</p><p>一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。</p></li><li><p><code>/srv</code>：</p><p>服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 &#x2F;srv&#x2F;www 内。</p></li><li><p><code>/usr</code>：</p><p>应用程序存放目录，&#x2F;usr&#x2F;bin 存放应用程序，&#x2F;usr&#x2F;share 存放共享数据，&#x2F;usr&#x2F;lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。&#x2F;usr&#x2F;local: 存放软件升级包。&#x2F;usr&#x2F;share&#x2F;doc: 系统说明文件存放目录。&#x2F;usr&#x2F;share&#x2F;man: 程序说明文件存放目录。</p></li></ul><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><h4 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h4><p><strong>显示所有网络接口的配置信息</strong></p><p><img src="https://s2.loli.net/2022/04/28/bxmeGzkOusJoAla.png" alt="image-20220428095340862"></p><p><code>eth33</code> 表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址(<code>MAC地址</code>）是<code>00:0c:29:0a:42:cd</code>。</p><p><code>inet </code> 用来表示网卡的IP地址，此网卡的IP地址是<code>192.168.205.128</code>，广播地址Broadcast是<code>192.168.205.255</code>，掩码地址<code>Mask:255.255.255.0</code>。</p><p><code>lo</code>是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p><ul><li>第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。</li><li>第二行：网卡的IP地址、子网、掩码。</li><li>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。</li><li>第四、五行：接收、发送数据包情况统计。</li><li>第七行：接收、发送数据字节数统计信息。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig [网卡名称] [参数]</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">add&lt;地址&gt;</td><td align="center">设置IPv6地址</td></tr><tr><td align="center">del&lt;地址&gt;</td><td align="center">删除IPv6地址</td></tr><tr><td align="center">down</td><td align="center">关闭指定网卡</td></tr><tr><td align="center">up</td><td align="center">启动指定网卡</td></tr><tr><td align="center">netmask&lt;地址&gt;</td><td align="center">配置子网掩码</td></tr><tr><td align="center">设备名称</td><td align="center">设置网卡名称</td></tr><tr><td align="center">IP地址</td><td align="center">配置IP地址</td></tr><tr><td align="center">-a</td><td align="center">显示所有配置的网络接口，不论是否激活</td></tr><tr><td align="center">broadcast</td><td align="center">配置网关</td></tr><tr><td align="center">-promisc</td><td align="center">关闭或启动指定网络设备的promiscuous模式</td></tr></tbody></table><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><ul><li><p>启动关闭指定网卡：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 up#开启ens33网卡</span><br><span class="line">ifconfig ens33 down #关闭网卡</span><br></pre></td></tr></table></figure></li><li><p>显示所有配置的网络接口，不论是否激活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure></li><li><p>显示指定网卡的相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33</span><br></pre></td></tr></table></figure></li><li><p>设置网卡成混杂模式以嗅探数据包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 promisc </span><br></pre></td></tr></table></figure></li><li><p>网卡配置和删除IPv6地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 add 33ffe:3240:800:1005::2/64#为网卡ens33配置IPv6地址</span><br><span class="line">ifconfig ens33 del 33ffe:3240:800:1005::2/64#为网卡ens33删除IPv6地址</span><br></pre></td></tr></table></figure></li><li><p>ifconfig修改MAC地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 hw ether 00:AA:BB:CC:dd:EE</span><br></pre></td></tr></table></figure></li><li><p>配置IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 192.168.1.1#配置ens33的IP地址为192.168.1.1</span><br><span class="line">ifconfig ens33 192.168.1.1 netmask 255.255.255.0#配置ens33的IP地址为192.168.1.1，子网掩码为255.255.255.0</span><br><span class="line">ifconfig ens33 192.168.1.1 netmask 255.255.255.0 broadcast 192.168.1.255#配置ens33的IP地址为192.168.1.1，子网掩码为255.255.255.0，网关为192.168.1.255知识补充</span><br></pre></td></tr></table></figure></li></ul><h4 id="知识补充–MAC地址"><a href="#知识补充–MAC地址" class="headerlink" title="知识补充–MAC地址"></a>知识补充–MAC地址</h4><blockquote><p>MAC地址（英语：Media Access Control Address），直译为媒体存取控制位址，也称为局域网地址（LAN Address），MAC位址，以太网地址（Ethernet Address）或物理地址（Physical Address），它是一个用来确认网络设备位置的位址。MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡(Network lnterface Card)的EPROM(一种闪存芯片，通常可以通过程序擦写)。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位的 。</p></blockquote><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><h4 id="功能描述："><a href="#功能描述：" class="headerlink" title="功能描述："></a>功能描述：</h4><p><strong>测试当前服务器是否可以连接目的主机</strong></p><p><img src="https://s2.loli.net/2022/04/28/5YqGKtc1zMZ2uEp.png" alt="image-20220428095456887"></p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [参数] [主机名或IP地址]</span><br></pre></td></tr></table></figure><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-c</td><td align="center">为发送ping包的数量,到达数量后停止发送</td></tr><tr><td align="center">-s</td><td align="center">字节数：指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节</td></tr><tr><td align="center">-q</td><td align="center">只显示最后的结果</td></tr><tr><td align="center">-t</td><td align="center">存活数值：设置存活数值TTL的大小</td></tr><tr><td align="center">-i</td><td align="center">设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。</td></tr></tbody></table><h4 id="具体使用-1"><a href="#具体使用-1" class="headerlink" title="具体使用"></a>具体使用</h4><ul><li><p>测试主机的连通性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping IP地址或主机</span><br></pre></td></tr></table></figure></li><li><p>测试与网关的连通性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -b 网关地址</span><br></pre></td></tr></table></figure></li><li><p>指定ping的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 次数 IP地址或网关</span><br></pre></td></tr></table></figure></li><li><p>ping 设置时间间隔和次数限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 次数 -i 时间 IP地址或者主机名</span><br></pre></td></tr></table></figure></li><li><p>通过域名ping公网的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 域名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hjl@hjl-virtual-machine:~$ ping -c 5  baidu.com</span><br><span class="line">PING baidu.com (220.181.38.148) 56(84) bytes of data.</span><br><span class="line">64 字节，来自 220.181.38.148 (220.181.38.148): icmp_seq=1 ttl=128 时间=39.8 毫秒</span><br><span class="line">64 字节，来自 220.181.38.148 (220.181.38.148): icmp_seq=2 ttl=128 时间=39.3 毫秒</span><br><span class="line">64 字节，来自 220.181.38.148 (220.181.38.148): icmp_seq=3 ttl=128 时间=40.7 毫秒</span><br><span class="line">64 字节，来自 220.181.38.148 (220.181.38.148): icmp_seq=4 ttl=128 时间=39.7 毫秒</span><br><span class="line">64 字节，来自 220.181.38.148 (220.181.38.148): icmp_seq=5 ttl=128 时间=39.9 毫秒</span><br></pre></td></tr></table></figure><p>从上方的结果可以看出baidu.com这个域名的公网地址为220.181.38.148</p></li></ul><h4 id="知识补充–Ping"><a href="#知识补充–Ping" class="headerlink" title="知识补充–Ping"></a>知识补充–Ping</h4><blockquote><p>ICMP协议是“Internet Control Message Protocol”（因特网控制消息协议）的缩写。它是TCP&#x2F;IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。</p><p>ping (Packet Internet Groper)，因特网包探索器，用于测试网络连接量的程序。Ping发送一个ICMP；回声请求消息给目的地并报告是否收到所希望的ICMP echo （ICMP回声应答）。它是用来检查网络是否通畅或者网络连接速度的命令</p><p>ping命令通常用来作为网络可用性的检查。ping命令可以对一个网络地址发送测试数据包，看该网络地址是否有响应并统计响应时间，以此测试网络。</p><p>ping和ICMP的关系：ping命令发送数据使用的是ICMP协议。</p></blockquote><blockquote><p>ping的原理：<br>向指定的网络地址发送一定长度的数据包，按照约定，若指定网络地址存在的话，会返回同样大小的数据包，当然，若在特定时间内没有返回，就是“超时”，会被认为指定的网络地址不存在。ICMP协议通过IP协议发送的，IP协议是一种无连接的，不可靠的数据包协议。在Unix&#x2F;Linux,序号从0开始计数，依次递增。而Windows ping程序的ICMP序列号是没有规律。ICMP协议在实际传输中数据包：20字节IP首部 + 8字节ICMP首部 + 1472字节&lt;数据大小&gt;38字节。ICMP报文格式：IP首部（20字节） + 8位类型 + 8位代码 + 16校验和 + （不同类型和代码，格式也有所不同）。</p></blockquote><h3 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h3><h4 id="IP配置文件位置"><a href="#IP配置文件位置" class="headerlink" title="IP配置文件位置"></a>IP配置文件位置</h4><p><code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><h4 id="进入配置文件"><a href="#进入配置文件" class="headerlink" title="进入配置文件"></a>进入配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><h4 id="解析配置文件内容"><a href="#解析配置文件内容" class="headerlink" title="解析配置文件内容"></a>解析配置文件内容</h4><p>在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts对网卡的配置文件进行永久性配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet      <span class="comment">#网络类型 以太网</span></span><br><span class="line">BOOTPROTO=static </span><br><span class="line">       <span class="comment">#1.这里可以为=none(过指定方式的办法来获得地址，如果没有指定的话可能会出现各种各样的网络受限 )</span></span><br><span class="line">       <span class="comment">#2.=dhcp 自动获取ip地址</span></span><br><span class="line">       <span class="comment">#3.=static  固定ip地址</span></span><br><span class="line">    DEFROUTE=<span class="built_in">yes</span><span class="comment">#是否设置默认路由</span></span><br><span class="line">    PEERDNS=<span class="built_in">yes</span></span><br><span class="line">    PEERROUTES=<span class="built_in">yes</span></span><br><span class="line">    IPV4_FAILURE_FATAL=no</span><br><span class="line">    IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">    IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">    IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">    IPV6_PEERDNS=<span class="built_in">yes</span></span><br><span class="line">    IPV6_PEERROUTES=<span class="built_in">yes</span></span><br><span class="line">    IPV6_FAILURE_FATAL=no</span><br><span class="line">    NAME=ens33     <span class="comment">#网卡名称(用户看到的网卡名)</span></span><br><span class="line">    UUID=858e2bc3-1b47-4660-9297-b0029c8cac56 <span class="comment">#网卡的唯一标识符</span></span><br><span class="line">    DEVICE=eth0      <span class="comment">#系统逻辑设备名</span></span><br><span class="line">    ONBOOT=<span class="built_in">yes</span> <span class="comment">#是否开机自启网卡 选项(no/yes)centos7默认no</span></span><br><span class="line">    IPADDR=192.168.1.3       <span class="comment">#指定的ip地址 如果你是dhcp这里是没有的</span></span><br><span class="line">    NETMASK=255.255.255.0    <span class="comment">#子网掩码</span></span><br><span class="line">    GATEWAY=192.168.1.2      <span class="comment">#网关 </span></span><br><span class="line">    DNS1=114.114.114.114     <span class="comment">#指定的第一个DNS服务器</span></span><br></pre></td></tr></table></figure><p>编辑完后，按键盘 <code>esc</code> ，然后输入 <code>:wq</code> 回车即可</p><p>执行 <code>service network restart</code> 重启网络</p><h4 id="知识补充–eth和ens的区别"><a href="#知识补充–eth和ens的区别" class="headerlink" title="知识补充–eth和ens的区别"></a>知识补充–eth和ens的区别</h4><p>一个是真实物理网卡，一个是虚拟网络会话，两者之间的关系就是一个真实物理网卡上可以绑定多个虚拟网络会话。eth0是真实物理网卡，ens33是虚拟网络会话。</p><blockquote><p>修改 IP 地址后可能会遇到的问题：</p><ol><li>物理机能 ping 通虚拟机，但是虚拟机 ping 不通物理机,一般都是因为物理机的 防火墙问题,把防火墙关闭就行</li><li>虚拟机能 Ping 通物理机,但是虚拟机 Ping 不通外网,一般都是因为 DNS 的设置有问题</li><li>虚拟机 Ping <a href="http://www.baidu.com/">www.baidu.com</a> 显示域名未知等信息,一般查看 GATEWAY 和 DNS 设 置是否正确</li><li>如果以上全部设置完还是不行，需要关闭 NetworkManager 服务</li><li>systemctl stop NetworkManager 关闭</li><li>systemctl disable NetworkManager 禁用</li><li>如果检查发现 systemctl status network 有问题 需要检查 ifcfg-ens33</li></ol></blockquote><h3 id="主机名称"><a href="#主机名称" class="headerlink" title="主机名称"></a>主机名称</h3><h4 id="查看当前服务器主机名称"><a href="#查看当前服务器主机名称" class="headerlink" title="查看当前服务器主机名称"></a>查看当前服务器主机名称</h4><p>命令提示符中可以看到主机名，主机名通常位于“@”符号后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hjl@hjl-virtual-machine:~$</span><br><span class="line">主机名为：hjl-virtual-machine</span><br></pre></td></tr></table></figure><p>命令查询</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br><span class="line">uname -n</span><br></pre></td></tr></table></figure><h4 id="临时修改主机名"><a href="#临时修改主机名" class="headerlink" title="临时修改主机名"></a>临时修改主机名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname 新主机名</span><br></pre></td></tr></table></figure><blockquote><p>“新主机名”可以用任何合法字符串来表示。不过采用这种方式，新主机名并不保存在系统中，重启系统后主机名将恢复为原先的主机名称。终端下不会立即显示生效后的主机名，重开一个终端窗口(通过ssh连接的终端需要重新连接才可以)。</p></blockquote><h4 id="永久修改主机名"><a href="#永久修改主机名" class="headerlink" title="永久修改主机名"></a>永久修改主机名</h4><p>主机名存放在<code>/etc/hostname</code>文件中，修改主机名时，编辑hostname文件，在文件中输入新的主机名并保存该文件即可。<code>修改完成后重启生效</code></p><blockquote><p>值的指出的是，在其它<a href="http://lib.csdn.net/base/linux">Linux</a>发行版中，并非都存在&#x2F;etc&#x2F;hostname文件。如Fedora发行版将主机名存放在&#x2F;etc&#x2F;sysconfig&#x2F;network文件中。所以，修改主机名时应注意区分是哪种<a href="http://lib.csdn.net/base/linux">linux</a>发行版。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><h3 id="hosts映射"><a href="#hosts映射" class="headerlink" title="hosts映射"></a>hosts映射</h3><p>hosts文件存放在<code>etc/hosts</code>文件中，通过修改该文件可以修改hosts映射。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>hosts文件内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">127.0.1.1       hjl-virtual-machine</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加hosts映射</span></span><br><span class="line">192.168.1.1    localhost</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改格式</span></span><br><span class="line">IP地址主机名</span><br></pre></td></tr></table></figure><h4 id="知识补充–hosts文件"><a href="#知识补充–hosts文件" class="headerlink" title="知识补充–hosts文件"></a>知识补充–hosts文件</h4><p>hosts是一个文本文件，用来记录IP和hostname（主机名）的映射关系</p><h3 id="远程登陆–ssh"><a href="#远程登陆–ssh" class="headerlink" title="远程登陆–ssh"></a>远程登陆–ssh</h3><blockquote><p>Secure Shell(SSH) 是由 IETF(The Internet Engineering Task Force) 制定的建立在应用层基础上的安全网络协议。它是专为远程登录会话(甚至可以用Windows远程登录Linux服务器进行文件互传)和其他网络服务提供安全性的协议，可有效弥补网络中的漏洞。通过SSH，可以把所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。目前已经成为Linux系统的标准配置。</p></blockquote><h4 id="安装ssh服务"><a href="#安装ssh服务" class="headerlink" title="安装ssh服务"></a>安装ssh服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>通常在工作过程中，公司中使用的真实服务器或者是云服务器，都不允许除运维人员之外的员工直接接触，因此就需要通过远程登录的方式来操作。</p><p>所以，远程登录工具就是必不可缺的，目前，比较主流的有 Xshell, SSH Secure Shell, SecureCRT,FinalShell 等，可以根据自己的习惯自行选择。</p><blockquote><p>下载地址:(建议使用IDM下载)</p><p>IDM：<a href="http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/IDM.7z">http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/IDM.7z</a></p><p>FinalShell：<a href="http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/FinalShell.7z">http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/FinalShell.7z</a></p><p>Xshell：<a href="http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/Xshell-7.0.0090.exe">http://yun.hjdragon.xyz/%E8%BD%AF%E4%BB%B6/Xshell-7.0.0090.exe</a></p></blockquote><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="Linux中的进程和服务"><a href="#Linux中的进程和服务" class="headerlink" title="Linux中的进程和服务"></a>Linux中的进程和服务</h3><ul><li><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）</p></li><li><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p></li></ul><h4 id="进程管理–ps"><a href="#进程管理–ps" class="headerlink" title="进程管理–ps"></a>进程管理–ps</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Linux 中的 <strong>ps</strong> 命令是 <strong>Process Status</strong> 的缩写。ps 命令用来列出系统中 <strong>当前<strong><strong>正在</strong></strong>运行</strong> 的那些进程，<strong>就是执行 ps 命令的那个时刻的那些进程<strong><strong>的快照</strong></strong>。</strong>使用该命令可以确定有哪些进程 正在运行 和 运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p><h5 id="Linux上进程有五种状态"><a href="#Linux上进程有五种状态" class="headerlink" title="Linux上进程有五种状态"></a>Linux上进程有五种状态</h5><blockquote><p>1.运行        ( 正在运行或在运行队列中等待 )  </p><p>2.中断        ( 休眠中, 受阻, 在等待某个条件的形成或接受到信号 ) </p><p>3.不可中断    ( 收到信号不唤醒和不可运行, 进程必须等待直到有中断发生 )  </p><p>4.僵死        ( 进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放 )  </p><p>5.停止        ( 进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行 ) </p></blockquote><h5 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h5><p>1.图形化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-system-monitor#图形化查看进程</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/28/zKSI8WfwFioyne7.png" alt="image-20220428141215658"></p><p>2.使用命令ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps#进程查看命令</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th align="center">-A</th><th align="center">显示所有进程</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">显示一个终端的所有进程，除了会话引线</td></tr><tr><td align="center">-N</td><td align="center">忽略选择</td></tr><tr><td align="center">-d</td><td align="center">显示所有进程，但忽略所有的会话引线</td></tr><tr><td align="center">-p</td><td align="center">pid进程使用CPU的时间</td></tr><tr><td align="center">-u</td><td align="center">选择有效的用户ID或者是用户名</td></tr><tr><td align="center">-g</td><td align="center">显示组的所有进程</td></tr><tr><td align="center">-m</td><td align="center">显示所有线程</td></tr></tbody></table><p>ps 命令常用用法（方便查看系统进程）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）ps a   #显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line">2）ps -A  #显示所有进程。</span><br><span class="line">3）ps c   #列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</span><br><span class="line">4）ps -e  #此参数的效果和指定&quot;A&quot;参数相同。</span><br><span class="line">5）ps e   #列出程序时，显示每个程序所使用的环境变量。</span><br><span class="line">6）ps f   #用 ASCII 字符显示树状结构，表达程序间的相互关系。</span><br><span class="line">7）ps -H  #显示树状结构，表示程序间的相互关系。</span><br><span class="line">8）ps -N  #显示所有的程序，除了执行ps指令终端机下的程序之外。</span><br><span class="line">9）ps s   #采用程序信号的格式显示程序状况。</span><br><span class="line">10）ps S  #列出程序时，包括已中断的子程序资料。</span><br><span class="line">11）ps -t&lt;终端机编号&gt; 　#指定终端机编号，并列出属于该终端机的程序的状况。</span><br><span class="line">12）ps -u root 　#显示root用户信息</span><br><span class="line">13）ps x 　      #显示所有程序，不以终端机来区分。</span><br></pre></td></tr></table></figure><h5 id="进程stat状态"><a href="#进程stat状态" class="headerlink" title="进程stat状态"></a>进程stat状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">=========================================进程STAT状态===============================</span><br><span class="line">D     无法中断的休眠状态（通常 IO 的进程）； </span><br><span class="line">R     正在运行，在可中断队列中； </span><br><span class="line">S     处于休眠状态，静止状态； </span><br><span class="line">T     停止或被追踪，暂停执行； </span><br><span class="line">W     进入内存交换（从内核2.6开始无效）； </span><br><span class="line">X     死掉的进程； </span><br><span class="line">Z     僵尸进程不存在但暂时无法消除；</span><br><span class="line">W:    没有足够的记忆体分页可分配</span><br><span class="line">WCHAN 正在等待的进程资源；</span><br><span class="line">&lt;:    高优先级进程</span><br><span class="line">N:    低优先序进程</span><br><span class="line">L:    有记忆体分页分配并锁在记忆体内 (即时系统或捱A I/O)，即,有些页被锁进内存</span><br><span class="line"></span><br><span class="line">s     进程的领导者（在它之下有子进程）； </span><br><span class="line">l     多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）； </span><br><span class="line">+     位于后台的进程组；</span><br></pre></td></tr></table></figure><h4 id="进程管理–kill"><a href="#进程管理–kill" class="headerlink" title="进程管理–kill"></a>进程管理–kill</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><blockquote><p>kill命令用来删除执行中的程序或工作。</p></blockquote><p>kill可将指定的信息送至程序。预设的信息为SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或job指令查看。</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill [选项] 进程号#通过进程号杀死/终止进程</span><br><span class="line">killall 进程名称#通过进程名称杀死/终止进程</span><br></pre></td></tr></table></figure><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><table><thead><tr><th align="center">-a</th><th align="center">当处理当前进程是，不限制命令名和进程号的对应关系</th></tr></thead><tbody><tr><td align="center">-l&lt;信息编号&gt;</td><td align="center">若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称</td></tr><tr><td align="center">-p</td><td align="center">指定kill命令只打印相关进程的进程号，而不发送任何信号</td></tr><tr><td align="center">-s&lt;信息名称或编号&gt;</td><td align="center">指定要送出的信息</td></tr><tr><td align="center">-u</td><td align="center">指定用户</td></tr></tbody></table><h5 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h5><table><thead><tr><th align="center">HUP</th><th align="center">1</th><th align="center">终端断线</th></tr></thead><tbody><tr><td align="center">INT</td><td align="center">2</td><td align="center">中断（同Ctrl+C）</td></tr><tr><td align="center">QUIT</td><td align="center">3</td><td align="center">退出（同Ctrl+\）</td></tr><tr><td align="center">TERM</td><td align="center">15</td><td align="center">终止（默认kill）</td></tr><tr><td align="center">KILL</td><td align="center">9</td><td align="center">强制终止</td></tr><tr><td align="center">CONT</td><td align="center">18</td><td align="center">继续（与STOP相反，fg&#x2F;bg命令）</td></tr><tr><td align="center">STOP</td><td align="center">19</td><td align="center">暂停（同Ctrl+Z）</td></tr></tbody></table><h5 id="kill-15"><a href="#kill-15" class="headerlink" title="kill -15"></a>kill -15</h5><p>系统会发送一个SIGTERM的信号给对应的程序。当程序接收到该signal后，将会发生以下的事情：</p><p>程序立刻停止；<br>当程序释放相应资源后再停止；<br>程序可能仍然继续运行；<br>大部分程序接收到SIGTERM信号后，会先释放自己的资源，然后在停止。但是也有程序可以在接受到信号量后，做一些其他的事情，并且这些事情是可以配置的。如果程序正在等待IO，可能就不会立马做出相应。也就是说，SIGTERM多半是会被阻塞的、忽略。</p><h5 id="kill-9"><a href="#kill-9" class="headerlink" title="kill -9"></a>kill -9</h5><p>kill -9 pid等于kill -s 9 pid，表示强制，尽快终止一个进程。多半admin会用这个命令。</p><p>因此kill - 9表示强制杀死该进程；与SIGTERM相比，这个信号不能被捕获或忽略，同时接收这个信号的进程在收到这个信号时不能执行任何清理。</p><h4 id="服务管理–systemctl"><a href="#服务管理–systemctl" class="headerlink" title="服务管理–systemctl"></a>服务管理–systemctl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start | stop | restart | status 服务名#启动/关闭/重启/查看服务</span><br></pre></td></tr></table></figure><h5 id="具体使用-2"><a href="#具体使用-2" class="headerlink" title="具体使用"></a>具体使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld#启动防火墙</span><br><span class="line">systemctl stop firewalld#关闭防火墙</span><br><span class="line">systemctl restart firewalld#重新启动防火墙</span><br><span class="line">systemctl status firewalld#查看防火墙的状态</span><br></pre></td></tr></table></figure><h3 id="systemctl-设置后台服务的自启配置"><a href="#systemctl-设置后台服务的自启配置" class="headerlink" title="systemctl 设置后台服务的自启配置"></a>systemctl 设置后台服务的自启配置</h3><h5 id="查看服务开机启动状态"><a href="#查看服务开机启动状态" class="headerlink" title="查看服务开机启动状态"></a>查看服务开机启动状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files</span><br><span class="line">systemctl list-unit-files|grep enabled</span><br></pre></td></tr></table></figure><h5 id="关掉指定服务的自动启动"><a href="#关掉指定服务的自动启动" class="headerlink" title="关掉指定服务的自动启动"></a>关掉指定服务的自动启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable service_name</span><br></pre></td></tr></table></figure><h5 id="开启指定服务的自动启动"><a href="#开启指定服务的自动启动" class="headerlink" title="开启指定服务的自动启动"></a>开启指定服务的自动启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable service_name</span><br></pre></td></tr></table></figure><h5 id="查看启动失败的服务"><a href="#查看启动失败的服务" class="headerlink" title="查看启动失败的服务"></a>查看启动失败的服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl --failed</span><br></pre></td></tr></table></figure><h5 id="查看服务是否开机启动"><a href="#查看服务是否开机启动" class="headerlink" title="查看服务是否开机启动"></a>查看服务是否开机启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled firewalld.service</span><br></pre></td></tr></table></figure><blockquote><p>查看服务的方法</p><ol><li>cd &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system</li><li>ls -al</li></ol></blockquote><p><img src="https://s2.loli.net/2022/04/28/f4GCyAZqwWzoMEY.png" alt="image-20220428143546469"></p><h4 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h4><h5 id="查看当前系统运行级别"><a href="#查看当前系统运行级别" class="headerlink" title="查看当前系统运行级别"></a>查看当前系统运行级别</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runlevel</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果</span></span><br><span class="line">N 5</span><br></pre></td></tr></table></figure><p>结果显示第一位是上一次系统运行级别(N表示没有上一次)，第二位表示系统当前运行级别</p><h5 id="Linux系统运行级别"><a href="#Linux系统运行级别" class="headerlink" title="Linux系统运行级别"></a>Linux系统运行级别</h5><table><thead><tr><th align="center">运行级别</th><th align="center">描述</th><th align="center">英文</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机模式，系统默认运行级别不能设置为0，否则不能正常启动，一开机就自动关机</td><td align="center">shutdown.target</td></tr><tr><td align="center">1</td><td align="center">单用户模式，root权限，用于系统维护，禁止远程登录，就像Windows下的安全模式</td><td align="center">emergency.target</td></tr><tr><td align="center">2</td><td align="center">多用户模式，没有 NFS 网络支持</td><td align="center">rescure.target</td></tr><tr><td align="center">3</td><td align="center">完整的多用户文本模式，有 NFS，登录后进入控制台命令模式</td><td align="center">multi-user.target</td></tr><tr><td align="center">4</td><td align="center">系统未使用，保留一般不用</td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">图形化模式，登陆后进入图形 GUI 模式</td><td align="center">graphical.target</td></tr><tr><td align="center">6</td><td align="center">重启模式，默认运行级别不能设为6，否则不能设为6，否则不能正常启动，就会一直开机重启</td><td align="center"></td></tr></tbody></table><h5 id="切换系统运行级别（临时生效，重启失效）"><a href="#切换系统运行级别（临时生效，重启失效）" class="headerlink" title="切换系统运行级别（临时生效，重启失效）"></a>切换系统运行级别（临时生效，重启失效）</h5><h6 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 0</span><br></pre></td></tr></table></figure><h6 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 6</span><br></pre></td></tr></table></figure><p>切换到字符模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init 3</span><br></pre></td></tr></table></figure><p>切换到图形模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init 5#需要登陆-切换模式</span><br><span class="line">startx#不需要登陆-启动软件</span><br></pre></td></tr></table></figure><h5 id="切换系统运行级别-永久生效"><a href="#切换系统运行级别-永久生效" class="headerlink" title="切换系统运行级别(永久生效)"></a>切换系统运行级别(永久生效)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default 级别</span><br></pre></td></tr></table></figure><h6 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default multi-user.target#将系统默认运行级别设置为3</span><br><span class="line">systemctl set-defalut graphical.target#将系统默认运行级别设置为5</span><br></pre></td></tr></table></figure><p>target取 multi-user 或者 graphical</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h4 id="firewalld的基本使用"><a href="#firewalld的基本使用" class="headerlink" title="firewalld的基本使用"></a>firewalld的基本使用</h4><p>启动firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>查看firewalld的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>停止firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>禁用firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h4 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h4><p>查看防火墙版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewalld-cmd --version</span><br></pre></td></tr></table></figure><p>查看帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewalld-cmd --help</span><br></pre></td></tr></table></figure><p>显示状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewalld-cmd --status</span><br></pre></td></tr></table></figure><p>查看所有打开的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>更新防火墙策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>查看区域信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-active-zones</span><br></pre></td></tr></table></figure><p>查看指定接口所属区域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-zone-of-interface=网卡</span><br></pre></td></tr></table></figure><p>拒绝所有包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-on</span><br></pre></td></tr></table></figure><p>取消拒绝状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --panic-off</span><br></pre></td></tr></table></figure><p>查看是否拒绝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-panic</span><br></pre></td></tr></table></figure><h4 id="防火墙策略-firewalld"><a href="#防火墙策略-firewalld" class="headerlink" title="防火墙策略(firewalld)"></a>防火墙策略(firewalld)</h4><h5 id="firewall-config为图形化工具"><a href="#firewall-config为图形化工具" class="headerlink" title="firewall-config为图形化工具"></a>firewall-config为图形化工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.先开启firewalld，关闭iptables</span><br><span class="line">yum search firewalld</span><br><span class="line">systemctl stop iptables</span><br><span class="line">systemctl mask iptables</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line">2.使用工具firewall-config改变firewalld默认的域(默认的是public)</span><br><span class="line"> 选择options---&gt;trusted  所有都可以连接我的主机</span><br><span class="line"> 在block中添加不允许连接的主机ip</span><br><span class="line">      </span><br><span class="line"> 选择options---&gt;block  所有都不可以连接我的主机</span><br><span class="line"> 在trusted中添加允许连接的主机ip</span><br><span class="line"></span><br><span class="line">3.端口转发</span><br><span class="line">    选择options----&gt;trusted-----&gt;port forwarding  </span><br><span class="line">       port/port/range :8888</span><br><span class="line">       local forward :80</span><br><span class="line">       masquerading 勾对号</span><br><span class="line">       浏览器中输入172.25.254.133：8888 自动访问80端口</span><br><span class="line"></span><br><span class="line">      也可以设置为自动转到别的主机的端口</span><br><span class="line">        选择options----&gt;trusted-----&gt;port forwarding  </span><br><span class="line">       port/port/range :22</span><br><span class="line">       forward another port :172.25.254.133  22端口</span><br><span class="line">       masquerading 勾对号</span><br><span class="line">      命令行输入ssh root@172.252.254.233 -X </span><br></pre></td></tr></table></figure><h4 id="firewall命令工具配置策略"><a href="#firewall命令工具配置策略" class="headerlink" title="firewall命令工具配置策略"></a>firewall命令工具配置策略</h4><p>查看已经添加的策略</p><h6 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a>查看已经开放的端口</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h6 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens33</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: </span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br></pre></td></tr></table></figure><h5 id="开启-x2F-移除指定协议的端口"><a href="#开启-x2F-移除指定协议的端口" class="headerlink" title="开启&#x2F;移除指定协议的端口"></a>开启&#x2F;移除指定协议的端口</h5><h6 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd  --add-port=端口号/udp --zone=public --permanent</span><br><span class="line">firewall-cmd  --add-port=端口号/tcp --zone=public --permanent</span><br></pre></td></tr></table></figure><blockquote><p>–zone&#x3D;public：作用域</p><p>–permanent：永久生效</p></blockquote><h6 id="移除端口"><a href="#移除端口" class="headerlink" title="移除端口"></a>移除端口</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --remove-port=端口号/tcp --permanent</span><br></pre></td></tr></table></figure><h5 id="配置IP访问权限"><a href="#配置IP访问权限" class="headerlink" title="配置IP访问权限"></a>配置IP访问权限</h5><h6 id="限制某IP的访问权限"><a href="#限制某IP的访问权限" class="headerlink" title="限制某IP的访问权限"></a>限制某IP的访问权限</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-rich-rule=&quot;rule family=&#x27;ipv4&#x27; source address=&#x27;IP地址&#x27; reject&quot; --permanent</span><br></pre></td></tr></table></figure><p>允许某IP的访问权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-rich-rule=&quot;rule family=&#x27;ipv4&#x27; source address=&#x27;IP地址&#x27; accept&quot; --permanent</span><br></pre></td></tr></table></figure><p>设置某IP通过某端口协议访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule &#x27;rule family=ipv4 source address=IP地址 port port=端口 protocol=$tcp accept&#x27;</span><br></pre></td></tr></table></figure><p>设置某IP无法通过某端口协议访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-rich-rule &#x27;rule family=ipv4 source address=IP地址 port port=端口 protocol=$tcp reject&#x27;</span><br></pre></td></tr></table></figure><h5 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="防火墙策略-iptable"><a href="#防火墙策略-iptable" class="headerlink" title="防火墙策略(iptable)"></a>防火墙策略(iptable)</h4><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><p>  现代的计算机环境是一个网络的环境，而且是一个非常开放的网络环境，在这个开放的网络环境中，用户可以获得大量的资讯信息，也可以更加轻松地进行社交、学生等。但这个开放的环境也给我们带来了一些不便，在开放的同时，网络中还伴有大量的攻击、发送垃圾邮件、盗号、欺诈等活动。对于IT运维人员而言，如何防止自己的服务器免受攻击？这需要管理员掌握扎实的安全理论基础知识以及专业工具的使用技巧。要防止遭受网络攻击，掌握一种网络访问控制工具的使用是至关重要的，而netfilter&#x2F;iptables 是集成在Linux2.4X版本内核中的包过滤防火墙系统。</p><p>  netfilter&#x2F;iptables 框架可以实现数据包过滤、网络地址转换以及数据包管理功能。Linux中的防火墙系统包括两部分：netfilter&#x2F;iptables。netfilter位于内核空间，目前是Linux内核的组成部分。具体地说，netfilter是Linux内核内部的一系列钩子，这些钩子允许数据表过滤函数挂载到系统内核中。而iptables是用户工具，由于netfilter位于在内核空间中，用户通常接触内核和修改内核，此时就需要一个像iptables这样的命令行工具，使用iptables可以添加、删除具体的过滤规则，iptables默认维护着四个表和五个链，所有的防火墙测落规则都将被分别写入这些表与链中。Linux防火墙因为已经集成在内核中，所以相对于应用层防火墙产品而言，基于内核的Linux防火墙更加快捷、高效。</p><p>  iptables有很好的可扩展性，也就是说，内核架构与iptables工具都可以添加扩展功能，CentOS6.3 系统中防火墙模块存放在&#x2F;lib&#x2F;modules&#x2F;2.6.32-279.e16.x86_64&#x2F;kernel&#x2F;net&#x2F;netfilter 目录下，当需某个模块功能时，可以通过modprobe加载该模块功能。</p><p>  默认的iptables规则表有：filter表（过滤规则表）、nat表（地址转换规则表）、mangle（修改数据标记位规则表）、raw（跟踪数据表规则表）。每个规则表中包含多个数据链：INPUT（入站数据过滤）、OUTPUT（出站数据过滤）、FORWARD（转发数据过滤）、PREROUTING（路由前过滤）和POSTROUTING（路由后过滤），防火墙规则需要写入到具体的数据链中。图1展示了Linux防火墙的过滤框架，从图中可以看出，如果是外部主机发送数据包给防火墙本机，数据将会经过PREROUTING链和INPUT链；如果是防火墙本机发送数据包到外部主机，数据将会经过OUTPUT链和POSTROUTING链；如果防火墙作为路由负责转发数据，则数据将经过PREROUTING链、FORWARD链以及POSTROUTING链。</p><p><img src="https://s2.loli.net/2022/04/28/Gk9tB6v3iKwRJCW.jpg" alt="img"></p><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><p>1、规则(rule)<br>规则(rule)就是网络管理员预定的条件，规则一般定义为“如果数据包头符合这样的条件，就这样处理这个数据包”。规则存储在内核空间的信息包过滤表 中，这些规则分别指定了源地址、目的地址、传输协议(TCP、UDP、ICMP)和服务类型(如HTTP、FTP、SMTP)。当数据包与规则匹配 时，iptables就根据规则所定义的方法来处理这些数据包，如放行(ACCEPT)、拒绝(REJECT)、或丢弃(DROP)等。配置防火墙的主要 规则就是添加、修改和删除这些规则。<br>2、链(chains)<br>链(chains)是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。当一个数据包到达一个链 时，iptables就会从链中的第一条规则开始检查，看该数据包是否满足规则所定义的条件，如果满足，系统就会根据该条规则所定义的方法处理该数据包， 否则iptables将继续检查下一条规则。如果该数据包不符合链中任何一何况规则，iptables就会根据该链预先定义的默认策略来处理该数据包。<br>3、表(tables)<br>表(tables)提供特定的功能，iptables内置3个表，即filter表、nat表和mangle表，分别用于实现包过滤，网络地址转换和包重构的功能。<br>(1)filter表。filter表主要用于过滤数据包，该表根据系统管理员预定义的一组规则过滤符合条件的数据包。对防火墙而言，主要利用filter表中指定一系列规则来实现对数据包进行过滤操作。<br>filter表是iptables默认的表，如果没有指定使用哪个表，iptables就默认使用filter表来执行所有的命令。filter表包含了 INPUT链(处理进入的数据包)、FORWARD链(处理转发的数据包)和OUTPUT链(处理本地生成的数据包)。在filter表中只允许对数据包 进行接受或丢弃的操作，而无法对数据包进行更改。<br>(2)nat表。nat青主要用于网络地址转换NAT，该表可以实现一对一、一对多和多对多的NAT工作，iptables就是使用该表实现共享上网功能 的。nat表包含了PREROUTING链(修改即将到来的数据包)、OUTPUT链(修改在路由之前本地生成的数据包)和POSTROUTING链(修 改即将出去的数据包)。<br>(3)mangle表。mangle表主要用于对指定的包进行修改，因为某些特殊应用可能去改写数据包的一些传输特性，例如理性数据包的TTL和TOS等，不过在实际应用中该表的使用率不高。</p><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>查看是否已经安装iptables以及iptables版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -V #注意：V是大写字母</span><br></pre></td></tr></table></figure><p>关闭iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>启动iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br></pre></td></tr></table></figure><p>重启iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p>保存命令行中设置的iptables规则到iptables文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法1：service iptables save</span><br><span class="line">方法2：etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure><p>查看iptables规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">方法1：iptables -L -n</span><br><span class="line">方法2：service iptables status</span><br><span class="line">方法3：cat /ect/sysconfig/iptables</span><br><span class="line">方法4：iptables --list</span><br><span class="line">方法5：iptables-save</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出结果</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED,DNAT</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">INPUT_direct  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">INPUT_ZONES  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">DROP       all  --  0.0.0.0/0            0.0.0.0/0            ctstate INVALID</span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED,DNAT</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FORWARD_direct  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FORWARD_IN_ZONES  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FORWARD_OUT_ZONES  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">DROP       all  --  0.0.0.0/0            0.0.0.0/0            ctstate INVALID</span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">OUTPUT_direct  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FORWARD_IN_ZONES (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">FWDI_public  all  --  0.0.0.0/0            0.0.0.0/0           [goto] </span><br><span class="line"></span><br><span class="line">Chain FORWARD_OUT_ZONES (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">FWDO_public  all  --  0.0.0.0/0            0.0.0.0/0           [goto] </span><br><span class="line"></span><br><span class="line">Chain FORWARD_direct (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDI_public (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">FWDI_public_pre  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDI_public_log  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDI_public_deny  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDI_public_allow  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDI_public_post  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FWDI_public_allow (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDI_public_deny (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDI_public_log (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDI_public_post (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDI_public_pre (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDO_public (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">FWDO_public_pre  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDO_public_log  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDO_public_deny  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDO_public_allow  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">FWDO_public_post  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FWDO_public_allow (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDO_public_deny (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDO_public_log (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDO_public_post (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FWDO_public_pre (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain INPUT_ZONES (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">IN_public  all  --  0.0.0.0/0            0.0.0.0/0           [goto] </span><br><span class="line"></span><br><span class="line">Chain INPUT_direct (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain IN_public (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">IN_public_pre  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">IN_public_log  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">IN_public_deny  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">IN_public_allow  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">IN_public_post  all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain IN_public_allow (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22 ctstate NEW,UNTRACKED</span><br><span class="line"></span><br><span class="line">Chain IN_public_deny (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain IN_public_log (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain IN_public_post (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain IN_public_pre (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT_direct (1 references)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 1 --append -A chain 　　　　　　#添加规则到链</span><br><span class="line"> 2 --delete -D chain 　　　　　　#删除规则从链里</span><br><span class="line"> 3 --delete -D chain rulenum 　　　　　　#根据规则号删除</span><br><span class="line"> 4 --insert -I chain [rulenum] 　　　　　　#插入规则默认到第一条</span><br><span class="line"> 5 --list -L [chain [rulenum]] 　　　　 #列表规则</span><br><span class="line"> 6 --flush -F [chain] 　　　　#清空所有规则</span><br><span class="line"> 7 --zero -Z [chain [rulenum]] 　　　　 #计数器</span><br><span class="line"> 8 --policy -P chain target 　　　　　　　　#改默认规则</span><br><span class="line"> 9 --protocol -p proto 　　　　　　　　 #针对协议过滤，例如`tcp&#x27;</span><br><span class="line">10 --source 　　 -s address[/mask][...] #基于源地址</span><br><span class="line">11 --destination -d address[/mask][...] #基于目的地址</span><br><span class="line">12 --in-interface -i input name[+] 　　　 #指定进入接口</span><br><span class="line">13 --jump -j target 　　　　　　　　　 #跳转</span><br><span class="line">14 --numeric -n 　　　　　　　　　　　　 #数字输出地址和端口</span><br><span class="line">15 --out-interface -o output name[+]　　　　　 # 指定出去接口</span><br><span class="line">16 --table -t table 　　　　　　　　 #指定表(default: `filter&#x27;)</span><br><span class="line">17 --line-numbers 　　　　　　　　　　　　　　　　 #显示规则号</span><br></pre></td></tr></table></figure><p>具体操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iptables -t filter -nL          #查看指定表filter中的策略 </span><br><span class="line">iptables -t nat -nL             #-n参数存在时显示的是ip，没有的话是主机名</span><br><span class="line">iptables -t mangle -nL   </span><br><span class="line">iptables -F                     #-F：删除指定表中所有规则</span><br><span class="line">iptables -nL </span><br><span class="line">service iptables save           #保存当前策略，保存了之后重启火墙策略重新出现</span><br><span class="line">vim /etc/sysconfig/iptables     #iptables的配置文件</span><br></pre></td></tr></table></figure><p>根据规则iptables的处理动作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 *ACCEPT：允许数据包通过。</span><br><span class="line">2 *DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span><br><span class="line">3 *REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</span><br><span class="line">4 *SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span><br><span class="line">5 *MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span><br><span class="line">6 *DNAT：目标地址转换。</span><br><span class="line">7 *REDIRECT：在本机做端口映射。</span><br><span class="line">8 *LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span><br></pre></td></tr></table></figure><p>常用命令操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 iptables -I INPUT -p tcp --dport 23:8809 -j DROP #过滤从23端口到8809端口</span><br><span class="line">2 iptables -I INPUT -p tcp -s 192.168.56.1 -j DROP #封单个IP</span><br><span class="line">3 iptables -I INPUT -p tcp --dport 23:8809 -j DROP #同时封多个端口：从23端口到8809端口</span><br><span class="line">4 iptables -A INPUT -P TCP --dport 80 -j ACCEPT #开发80端口</span><br><span class="line">5 iptables -I OUTPUT -p tcp --dport 80 -j DROP 　#不允许80端口流出</span><br><span class="line">6 iptables -I INPUT -p tcp -m multiport --dport 21,23,24,80,3306 -j DROP #匹配端口范围</span><br><span class="line">7 iptables -A INPUT -p icmp -s 192.168.56.0/24 --icmp-type 8 -j ACCEPT #设置同网段内可以访问（公司内部可以访问，其他人员不能访问）</span><br><span class="line">8 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT #允许关联的状态包（ftp协议，21连接端口，20数据传输端口）</span><br></pre></td></tr></table></figure><h4 id="防火墙策略（ufw）"><a href="#防火墙策略（ufw）" class="headerlink" title="防火墙策略（ufw）"></a>防火墙策略（ufw）</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>UFW 全称为Uncomplicated Firewall，是Ubuntu 系统上默认的防火墙组件, 为了轻量化配置iptables 而开发的一款工具。 UFW 提供一个非常友好的界面用于创建基于IPV4，IPV6的防火墙规则。</p><h5 id="开启和禁用"><a href="#开启和禁用" class="headerlink" title="开启和禁用"></a>开启和禁用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw enable#开启防火墙</span><br><span class="line">ufw disable#禁用防火墙</span><br><span class="line">ufw reset#重置防火墙，会把你所有已经添加的规则全部删除，并且禁用防火墙</span><br></pre></td></tr></table></figure><h5 id="查看ufw防火墙的状态"><a href="#查看ufw防火墙的状态" class="headerlink" title="查看ufw防火墙的状态"></a>查看ufw防火墙的状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ufw status</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">未开启的提示信息</span></span><br><span class="line">Status : inactive</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启后的提示信息</span></span><br><span class="line">Status : active</span><br></pre></td></tr></table></figure><h5 id="设置默认的防火墙规则，默认为允许"><a href="#设置默认的防火墙规则，默认为允许" class="headerlink" title="设置默认的防火墙规则，默认为允许"></a>设置默认的防火墙规则，默认为允许</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw default allow|deny</span><br><span class="line">allow：允许</span><br><span class="line">deny：拒绝</span><br></pre></td></tr></table></figure><h5 id="规则协议"><a href="#规则协议" class="headerlink" title="规则协议"></a>规则协议</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ufw [delete] [insert NUM]  allow|deny [in|out]  [PORT[/PROTOCOL] ]  [comment COMMENT]</span><br><span class="line"> </span><br><span class="line">delete : 删除这个规则</span><br><span class="line">insert : Num代表你要插入到防火墙规则的那个位置，规则是有序排列的。会根据需要来一个个检查</span><br><span class="line">allow|deny : 这条规则是允许的还是禁用的</span><br><span class="line">in|out: 这条规则对发送还是接收数据生效</span><br><span class="line">PORT: 端口号</span><br><span class="line">protocol : 协议，例如TCP还是UDP</span><br><span class="line">comment : 注释</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw insert 2 allow in 22/tcp#添加一条允许ssh的规则（ssh的端口号为22，协议是tcp），并且插入到位置2</span><br><span class="line">ufw deny in 22#禁用22端口连入</span><br></pre></td></tr></table></figure><h5 id="IP规则"><a href="#IP规则" class="headerlink" title="IP规则"></a>IP规则</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ufw  [delete]  [insert  NUM]  allow|deny  [in|out  [on INTERFACE]] [proto PROTOCOL] </span><br><span class="line">[from ADDRESS [port PORT]]  [to ADDRESS [port PORT]] [comment COMMENT]</span><br><span class="line"> </span><br><span class="line">INTERFACE ：网卡，就是针对哪个网卡生效，可以使用ifconfig或ip addr查看你的网卡</span><br><span class="line">form ADDRESS  : 源IP地址</span><br><span class="line">to ADDRESS : 目标IP地址</span><br><span class="line">PORT : 跟在源IP地址后面就是源IP地址的端口号，反之则是目标IP地址的端口号</span><br><span class="line">其他的都和协议规则的一致</span><br></pre></td></tr></table></figure><p>具体操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw allow proto tcp from 192.168.1.1 port 22 #添加允许192.168.1.1 的22端口tcp协议（ssh）的规则</span><br><span class="line">ufw allow from 192.168.1.1 port 80 to 192.168.1.1 port 8080#允许源IP地址192.168.1.1的8088端口 发送到 目标地址192.162.1.1的8080端口</span><br></pre></td></tr></table></figure><h5 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法1：ufw delete allow 22/tcp#删除ssh规则</span><br><span class="line">方法2：使用序号删除</span><br><span class="line">ufw status numbered#查询策略序号</span><br><span class="line">ufw delete 1#删除第一条规则</span><br></pre></td></tr></table></figure><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><blockquote><p>前言</p><p>在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>Linux 系统中为了提高磁盘的读写效率，对磁盘采取了 “预读迟写”操作方式。当用户 保存文件时，Linux 核心并不一定立即将保存数据写入物理磁盘中，而是将数据保存在缓冲区中，等缓冲区满时再写入磁盘，这种方式可以极大的提高磁盘写入数据的效率。</p><p>但是， 也带来了安全隐患，如果数据还未写入磁盘时，系统掉电或者其他严重问题出现，则将导 致数据丢失。使用 sync 指令可以立即将缓冲区的数据写入磁盘。</p></blockquote><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><p>功能：将数据由内存同步到硬盘中</p><h3 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h3><p>功能：停机，关闭系统，但是不断电</p><h3 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h3><p>功能：关机，断电</p><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h3><p>功能：重启，等同于shutdown -r now</p><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><table><thead><tr><th align="center">选项</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-H</td><td align="center">相当于-halt，停机</td></tr><tr><td align="center">-f</td><td align="center">-f&#x3D;reboot重启</td></tr></tbody></table><table><thead><tr><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">now</td><td align="center">立刻关机</td></tr><tr><td align="center">时间</td><td align="center">等待多久后关机（时间单位是分钟）</td></tr></tbody></table><h3 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）将数据由内存同步到硬盘中 </span><br><span class="line"><span class="meta prompt_">[root@]#</span><span class="language-bash"><span class="built_in">sync</span></span> </span><br><span class="line">（2）重启 </span><br><span class="line"><span class="meta prompt_">[root@]# </span><span class="language-bash">reboot</span> </span><br><span class="line">（3）停机（不断电） </span><br><span class="line"><span class="meta prompt_">[root@]#</span><span class="language-bash">halt</span> </span><br><span class="line">（4）计算机将在 1 分钟后关机，并且会显示在登录用户的当前屏幕中 </span><br><span class="line"><span class="meta prompt_">[root@]#</span><span class="language-bash">shutdown -h 1 ‘This server will shutdown after 1 mins’</span> </span><br><span class="line">（5）立马关机（等同于 poweroff） </span><br><span class="line"><span class="meta prompt_">[root@]# </span><span class="language-bash">shutdown -h now</span> </span><br><span class="line">（6）系统立马重启（等同于 reboot） </span><br><span class="line"><span class="meta prompt_">[root@]# </span><span class="language-bash">shutdown -r now</span></span><br></pre></td></tr></table></figure><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><p>RPM（RedHat Package Manager），RedHat软件包管理工具，是Linux这系列操作系统里面的打包安装工具。</p><h4 id="RPM包的名称格式"><a href="#RPM包的名称格式" class="headerlink" title="RPM包的名称格式"></a>RPM包的名称格式</h4><p><code>Apache-1.3.23-11.i386.rpm</code> - “apache” 软件名称</p><ul><li>“1.3.23-11”软件的版本号，主版本和此版本</li><li>“i386”是软件所运行的硬件平台，Intel 32位处理器的统称</li><li>“rpm”文件扩展名，代表RPM包</li></ul><h4 id="RPM查询命令（rpm-qa）"><a href="#RPM查询命令（rpm-qa）" class="headerlink" title="RPM查询命令（rpm -qa）"></a>RPM查询命令（rpm -qa）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa#查询所安装的所有rpm的软件包</span><br><span class="line">rpm -qa | grep rpm软件包#查询指定rpm包</span><br></pre></td></tr></table></figure><h4 id="RPM卸载命令（rpm-e）"><a href="#RPM卸载命令（rpm-e）" class="headerlink" title="RPM卸载命令（rpm -e）"></a>RPM卸载命令（rpm -e）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e PRM软件包</span><br><span class="line">rpm -e --nodeps 软件包</span><br></pre></td></tr></table></figure><ul><li>-e：卸载软件包</li><li>–nodeeps：卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了</li></ul><h4 id="RPM安装命令（rpm-ivh）"><a href="#RPM安装命令（rpm-ivh）" class="headerlink" title="RPM安装命令（rpm -ivh）"></a>RPM安装命令（rpm -ivh）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh RPM 包全名</span><br></pre></td></tr></table></figure><ul><li>-i：install，安装</li><li>-v：-verbose，显示详细信息</li><li>-h：-hash，进度条</li><li>–nodeps：安装前不检查依赖</li></ul><h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><p>YUM（全称为 Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 CentOS 中的 Shell 前端软件包管理器，基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包 并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="系统运维" scheme="https://github.com/HKingDragon/hkingdragon.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://github.com/HKingDragon/hkingdragon.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>FAT32系统</title>
    <link href="https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/FAT32%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/FAT32%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-04-26T11:38:48.000Z</published>
    <updated>2022-04-26T11:41:01.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FAT32系统"><a href="#FAT32系统" class="headerlink" title="FAT32系统"></a>FAT32系统</h1><h2 id="1-FAT32文件系统结构总览"><a href="#1-FAT32文件系统结构总览" class="headerlink" title="1.FAT32文件系统结构总览"></a>1.FAT32文件系统结构总览</h2><p>FAT32文件系统由DBR及其保留区、FAT1、FAT2、DATA区四个部分</p><p><img src="https://s2.loli.net/2022/04/26/OuRqJesxh16cbaV.png" alt="image-20220426193330987"></p><ol><li>DBR及其保留扇区：操作系统引导记录，DBR后有一些保留扇区</li><li>FAT1：文件分配表，FAT32一般有两份FAT,FAT1是第一个也是主FAT</li><li>FAT2：FAT1的备份</li><li>DATA:DATA数据区，FAT32主要区域，包含目录项</li></ol><h2 id="2-FAT32-DBR分析"><a href="#2-FAT32-DBR分析" class="headerlink" title="2.FAT32 DBR分析"></a>2.FAT32 DBR分析</h2><p>组成部分：跳转指令、OEM代号、BPB、引导程序和结束标志</p><ol><li><h3 id="跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准"><a href="#跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准" class="headerlink" title="跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准"></a>跳转指令：将程序执行流程跳转到引导程序，计算跳转目录时是以该指令的下一个字节为基准</h3><p>EB 58 代表汇编语言额JMP 58 ，所以实际执行的下一条指令应位于5A，紧接着跳转指令的是一条空指令NOP（90H）</p></li><li><h3 id="OEM-代号：占用8字节，内容由创建该文件系统的OEM厂商安排。"><a href="#OEM-代号：占用8字节，内容由创建该文件系统的OEM厂商安排。" class="headerlink" title="OEM 代号：占用8字节，内容由创建该文件系统的OEM厂商安排。"></a>OEM 代号：占用8字节，内容由创建该文件系统的OEM厂商安排。</h3><p>OEM代号为”MSDOS5.0”说明这个FAT32分区是由微软的Windows 2000以上的操作系统格式化创建的</p></li><li><h3 id="BPB：FAT32-的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息"><a href="#BPB：FAT32-的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息" class="headerlink" title="BPB：FAT32 的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息"></a>BPB：FAT32 的BPB从DBR第12个字节处开始，占用7字节，记录了文件系统的重要信息</h3><p><img src="https://s2.loli.net/2022/04/26/Vhyd31nmurape2Y.png" alt="image-20220426193430807"></p></li></ol><p>​winhex模板查看文件系统信息</p><p>​<img src="https://s2.loli.net/2022/04/26/t4uRQTxWnFyNf8J.png" alt="image-20220426193453768"></p><p>常用信息：</p><ul><li>JMP instruction :跳转指令</li><li>OEM：OEM代号</li><li>Bytes per sector：每扇区字节数</li><li>Sectors per cluster：每簇扇区数</li><li>Reserved sectors：DBR保留扇区数(FAT1的开始扇区号)</li><li>Number of FATs：FAT表个数</li><li>Sectors per track：每FAT表扇区数</li><li>Root dir 1st duster：根目录首簇号</li><li>FSinfo setor：文件系统信息扇区号</li><li>Backup boot sector：DBR备份扇区号</li><li>File system：文件系统格式</li></ul><p>参数详细分析</p><ol><li><p>0BH~OCH:每扇区字节数</p><ul><li>记录每个扇区的大小，一般为512字节，512不是固定值，合法值包括512、1024、2048、4096</li></ul></li><li><p>ODH~ODH：每簇扇区数</p><ul><li>每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇</li><li>FAT32最大支持128扇区的簇</li><li>在FAT32文件系统中所有的簇都从2号簇开始进行编写，所有簇都位于数据区内，在数据区之前时没有簇的</li></ul></li><li><p>0EH~0FH：DBR保留扇区数</p><ul><li>DBR保留扇区数是指DBR本身占用的扇区以及其后保留扇区的总和，也就是DBR到FAT1之间的是扇区总和，或者说是FAT1的开始扇区号</li><li>FAT32系统该值的取值范围是32扇区到38扇区之间</li></ul></li><li><p>10H~10H:FAT表的个数</p><ul><li>FAT表格式描述该文件系统有几个FAT表，一般FAT文件系统中都有两个FAT，即FAT1和FAT2,FAT2是FAT1的备份</li></ul></li><li><p>15H~15H：介质描述符</p></li></ol><ul><li>介质描述符是描述磁盘介质的参数，根据磁盘性质不同，取不同的值。</li></ul><ol start="6"><li><p>18H~19H：每磁道扇区数</p><ul><li>其值一般为255</li></ul></li><li><p>20H~23H：扇区总数</p><ul><li>扇区总数是指分区的总扇区数，也就是FAT32分区的大小</li></ul></li><li><p>24H~27H：每FAT扇区数</p><ul><li>记录FAT32分区中每个FAT表占用的扇区数</li></ul></li><li><p>28H~29H：标志</p><ul><li>表示FAT2是否可用，当其二进制最高位置为1时，表示只用FAT1可用，否则FAT2也可以用</li></ul></li><li><p>2AH~2BH：版本</p><ul><li>通常都为0</li></ul></li><li><p>2CH~2FH：根目录首簇号</p><ul><li>通常把数据区的第一个簇分配给根目录使用，也就是2号簇</li></ul></li><li><p>30H~31H：文件系统信息扇区号</p><ul><li><p>FAT32文件系统在DBR的保留扇区中安排了一个文件系统信息扇区，用以记录数据区中空闲簇的数量以及下一个空闲簇的簇号，该扇区一般在分区的1号扇区</p><p><img src="https://s2.loli.net/2022/04/26/4CztfPLlDAQGTeE.png" alt="image-20220426193610006"></p></li></ul></li><li><p>32H~33H：DBR备份扇区</p><ul><li>FAT32系统在DBR的保留扇区中安排了一个DBR的备份，一般在6号扇区，分区的第7个扇区。该备份扇区与原DBR扇区的内容和完全一样，如果原DBR遭到破坏，可以用备份扇区修复。</li></ul></li><li><p>40H~40H：BIOS驱动器号</p><ul><li>BIOS所描述的设备号码，一般把硬盘定义为8XH</li></ul></li><li><p>42H~42H:扩展引导标志</p><ul><li>扩展引导标记用来确认后面的三个参数是否有效，一般值为29H</li></ul></li><li><p>52H~59H：文件系统类型</p><ul><li>BPB的最后一个参数，直接用ASCII码记录当前分区的文件系统类型</li></ul></li></ol><h3 id="4-引导程序"><a href="#4-引导程序" class="headerlink" title="4.引导程序"></a>4.引导程序</h3><p>​FAT32的DBR引导扇区占用420字节（5AH~1FDH）</p><h3 id="5-结束标志"><a href="#5-结束标志" class="headerlink" title="5.结束标志"></a>5.结束标志</h3><p>​DBR、MBR、EBR的结束标志都相同为“55AA”</p><p><strong>以上五个部分共占用512字节，称它为DOS引导扇区。</strong></p><h2 id="3-FAT32文件系统的FAT表分析"><a href="#3-FAT32文件系统的FAT表分析" class="headerlink" title="3.FAT32文件系统的FAT表分析"></a>3.FAT32文件系统的FAT表分析</h2><h3 id="1-FAT表的特点"><a href="#1-FAT表的特点" class="headerlink" title="1.FAT表的特点"></a>1.FAT表的特点</h3><ol><li><p>每个FAT项的大小有32位（相当于4字节）</p></li><li><p>FAT32文件系统的FAT项是32为的，但是Windows系统只能用到26位。</p></li><li><p>系统能管理的簇大小可以达到128个扇区（64KB），FAT32最多可以管理的簇数位67108863，FAT32能够管理的分区大小为64*67108863&#x3D;4294967232KB&#x3D;4TB</p></li><li><p>FAT表中未使用的簇对应的FAT项用”00 00 00 00“，已经分配的簇号对应的FAT表项为”FF FF FF EF”,表示坏簇的表项为”FF FF FF F7”，文件结束簇为FF FF FF F8~FFFFFFFFF</p><table><thead><tr><th>表项值（12位）</th><th>表项值（16位）</th><th>表项值（32位）</th><th>簇描述信息含义</th></tr></thead><tbody><tr><td>000H</td><td>0000H</td><td>00000000H</td><td>“0”值（未分配使用）</td></tr><tr><td>001H–FEFH</td><td>0001–FFEFH</td><td>00000001–FFFFFFEFH</td><td>“一个簇号”（已占用）</td></tr><tr><td>FF0H–FF6H</td><td>FFF0–FFF6H</td><td>FFFFFFF0–FFFFFFF6H</td><td>保留</td></tr><tr><td>FF7H</td><td>FFF7H</td><td>FFFFFFF7H</td><td>坏簇</td></tr><tr><td>FF8H–FFFH</td><td>FFF8H–FFFFH</td><td>FFFFFFF8–FFFFFFFFH</td><td>“EOF”（文件结束簇）</td></tr></tbody></table></li></ol><h3 id="2-FAT表的实际应用"><a href="#2-FAT表的实际应用" class="headerlink" title="2.FAT表的实际应用"></a>2.FAT表的实际应用</h3><p>DBR所在分区，定位FAT1的步骤：</p><ol><li>系统通过该分区的分区表信息，定位到DBR扇区</li><li>读取DBR的BPB，通过读取OEH~OFH偏移出“DBR保留参数”这个参数</li><li>跳转到“DBR保留参数”这个扇区，就是FAT1表项的开始</li></ol><p><strong>格式化程序会把分配给FAT表的所有扇区都清零</strong></p><p>F8 FF FF 0F：F8表示介质类型为硬盘</p><p>DBR所在分区，定位备份FAT2的步骤：</p><ol><li>系统通过该分区的分区表信息，定位到DBR扇区</li><li>读取DBR的OEH~OFH偏移处，可以得到“DBR保留扇区数”</li><li>读取DBR的24H~27H偏移处，可以得到“每FAT扇区数”</li><li>FAT2的位置&#x3D;DBR保留扇区数+每FAT扇区数</li></ol><p>FAT2与FAT1的内容是相同的，FAT2是FAT1的备份</p><p><strong>如果FAT项为非零值，那么可能有三种情况：</strong></p><ul><li>FAT项映射的簇是一个不可用的坏簇，那么该FAT项中的值为坏簇标志（FFFFFFF7H）</li><li>FAT项映射的是某个文件的最后一个簇，那么该FAT项中的值为结束标志（FFFFFFOF)</li><li>该FAT项映射的簇被某个文件占用，但并不是文件的最后一个簇，那么该FAT项中的值是文件下一个簇的簇号</li></ul><h2 id="4-FAT32文件系统的数据区分析"><a href="#4-FAT32文件系统的数据区分析" class="headerlink" title="4.FAT32文件系统的数据区分析"></a>4.FAT32文件系统的数据区分析</h2><h3 id="数据区的位置"><a href="#数据区的位置" class="headerlink" title="数据区的位置"></a>数据区的位置</h3><ol><li>定位到DBR扇区</li><li>读取DBR的OEH~OFH偏移处，得到”DBR保留扇区”</li><li>读取DBR的24H~27H偏移处，得到”每FAT扇区数”</li><li>数据的位置&#x3D;DBR保留扇区数+2*每FAT扇区数</li></ol><h3 id="数据区的内容"><a href="#数据区的内容" class="headerlink" title="数据区的内容"></a>数据区的内容</h3><p>FAT32文件系统数据区的内容主要由三部分组成：根目录、子目录和文件内容。在数据区中是以“簇”为单位来管理这段空间。</p><h2 id="5-FAT32文件系统目录项分析"><a href="#5-FAT32文件系统目录项分析" class="headerlink" title="5.FAT32文件系统目录项分析"></a>5.FAT32文件系统目录项分析</h2><p>在FAT32文件系统下，分区根目录下的文件及文件夹的目录项存放在根目录区中，分区子目录下的文件及文件夹的目录项存放在子目录区中，根目录区和子目录区都在数据区中。</p><p>FAT32目录项可以分为四类：</p><ol><li><h3 id="短文件名目录项"><a href="#短文件名目录项" class="headerlink" title="短文件名目录项"></a>短文件名目录项</h3><p><img src="https://s2.loli.net/2022/04/26/Pg5jBxaoyLqR2h1.png" alt="image-20220426193655242"></p></li><li><h3 id="长文件名目录项"><a href="#长文件名目录项" class="headerlink" title="长文件名目录项"></a>长文件名目录项</h3><ol><li><p>系统取长文件名的前6个字符加上“~1”形成短文件名，扩展名不变</p></li><li><p>如果已存在这个名字的文件，则符号“~”后的数字自动增加</p></li><li><p>如果有非法的字符，则以下划线”_”替代</p></li><li><p>如果文件名很长，一个长文件就需要多个目录项，这些目录项按倒序排列在其短文件名目录项之前</p><p><img src="https://s2.loli.net/2022/04/26/LRBPeVDFjl1wv9m.png" alt="image-20220426193744723"></p><p>winhex模板显示</p><p>​<img src="https://s2.loli.net/2022/04/26/TLSk2RgCMxNlWfH.png" alt="image-20220426193758219"></p></li></ol><p></p></li><li><h3 id="“-”目录项和”-”目录项"><a href="#“-”目录项和”-”目录项" class="headerlink" title="“.”目录项和”..”目录项"></a>“.”目录项和”..”目录项</h3><ol><li><p>“.”表示当前目录</p><p>2E 20 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F </p><p>3F 3F 3F 3F 00 00 3F 3F 3F 3F 00 00 00 00 00 00</p></li><li><p>“..”表示上级目录</p><p>2E 2E 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F </p><p>3F 3F 3F 3F 00 00 3F 3F 3F 3F 00 00 00 00 00 00</p></li><li><p>卷标目录项</p><ol><li>对于FAT格式的分区，卷标的长度最多允许达到11字节，如果卷标为中文，则最多支持5个字符</li><li>卷标的目录项不记录起始簇号和大小</li><li>卷标的目录项不记录创建时间和最后访问时间，只记录修改时见&#x3D;间</li></ol></li></ol></li></ol><h2 id="6-FAT32文件系统根目录与子目录的管理"><a href="#6-FAT32文件系统根目录与子目录的管理" class="headerlink" title="6.FAT32文件系统根目录与子目录的管理"></a>6.FAT32文件系统根目录与子目录的管理</h2><h3 id="1-根目录的管理"><a href="#1-根目录的管理" class="headerlink" title="1.根目录的管理"></a>1.根目录的管理</h3><p>通过根目录找到文件的数据区：</p><ol><li>通过分区表定位分区一的开始位置，即该位置为这个分区的DBR扇区</li><li>通过”DBR保留扇区”、”每FAT扇区数”两个参数计算出根目录的开始扇区</li><li>通过文件名定位到目标文件的目录项，在目录中计算数据区所在的簇号</li><li>通过簇号转跳到数据区所在的扇区</li></ol><h3 id="2-子目录的管理"><a href="#2-子目录的管理" class="headerlink" title="2.子目录的管理"></a>2.子目录的管理</h3><ol><li>先找到根目录，根据根目录的簇号来定位到根目录的数据区</li><li>在根目录的数据区中搜索子目录的文件名</li><li>找到子目录的文件后再根据子目录的高低簇来找到子目录的数据区</li></ol><h2 id="7-FAT32文件系统删除文件分析"><a href="#7-FAT32文件系统删除文件分析" class="headerlink" title="7.FAT32文件系统删除文件分析"></a>7.FAT32文件系统删除文件分析</h2><h3 id="文件删除后的变化："><a href="#文件删除后的变化：" class="headerlink" title="文件删除后的变化："></a>文件删除后的变化：</h3><ul><li>文件目录项第一个字节被改为E5，文件名其他字节没有变化</li><li>文件高位簇2个字节清零</li><li>文件大小字节没有改变</li><li>文件FAT表的簇已经清零</li></ul><h3 id="文件删除后的恢复："><a href="#文件删除后的恢复：" class="headerlink" title="文件删除后的恢复："></a>文件删除后的恢复：</h3><p>​将被删除的文件的数据区的内容全部选中，并另存为一个新文件重命名即可将被删除的文件恢复出来。</p><h3 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h3><ul><li>如果文件在数据区中存放的位置比较靠后，文件起始簇号就会很大，那么文件目录项中记录文件起始簇号的高位两个字节就会有数据，当文件删除时，这两个字节会被清零，该文件的起始簇号值也就丢失了，这种删除的文件比较难恢复。</li><li>文件删除后，其FAT表中的簇链也会清零，如果文件有碎片，也就是不连续存放，这种删除的文件也比较难恢复。</li><li>文件删除后，虽然文件的内容并不会被清除，但其所占用的簇会释放，这些簇就很容易被其他文件进一步占用，这样就覆盖了被删除文件的数据，这种情况下的数据将无法恢复。</li></ul><h2 id="8-FAT32文件系统删除文件后目录项起始簇号高位清零的情况"><a href="#8-FAT32文件系统删除文件后目录项起始簇号高位清零的情况" class="headerlink" title="8.FAT32文件系统删除文件后目录项起始簇号高位清零的情况"></a>8.FAT32文件系统删除文件后目录项起始簇号高位清零的情况</h2><ul><li>将文件先放入回收站，在清空回收站，这种删除方法不清楚文件目录项中起始簇号高位的两个字节</li><li>将文件用shift+delete组合键直接彻底删除，这种删除方法将清除文件目录项中起始簇号高位的两个字节</li><li>将文件用shift+delete组合键直接彻底扇区，这种删除方法将清楚文件夹的目录项中起始簇号高位的两个字节，而文件夹里面的文件目录项起始簇号高位的两个字节并不清空。</li></ul><h3 id="文件目录项起始簇号高位清零后的恢复方法："><a href="#文件目录项起始簇号高位清零后的恢复方法：" class="headerlink" title="文件目录项起始簇号高位清零后的恢复方法："></a>文件目录项起始簇号高位清零后的恢复方法：</h3><ul><li><p>文件删除后，文件的创建时间，修改时间并不改变，所以可以寻找与被删除文件创建时间十分相近的文件，参考他们的起始簇号高位的两个字节</p></li><li><p>穷举法：</p><ol><li><p>点击被删除文件然后将文件所在的扇区号进行复制，再将复制的扇区号复制到跳至扇区扇区的位置，然后下面簇的框中显示的就是低位簇的结果。</p></li><li><p>用假设法假设高位簇为1，那么就是1乘以65563等于65536（注：每加一个簇那么就要在原有的基础上再加一个1乘以65536，以此类推）</p><p>高位簇公式：用低位簇的数值加上假设的数（注：再假设高位簇的时候只能在原有的1x65536上叠加一个1x65536）。例如：低位簇为：18344       高位簇假设为1那么高位簇就是1x65536；18344+65536&#x3D;83880；  如果假设高位簇为2，那么就是83880+1x65536&#x3D;149416就这样以此类推直到找到为止</p></li><li><p>将算出的结果复制到跳至扇区簇的框中进行跳转看是否在这个簇里面，如果没有在里面，那么再找下一个簇。（注：我们在这里算出的结果是簇的结果而不是扇区的）。</p></li><li><p>找到后将数据提取出来就可以了（注：如果要它的字节数，那么就用字符转换器将汉字会英文转换成十六进制，然后查找到后，到1C位置查看字节数）。</p></li></ol></li></ul><h2 id="9-FAT32文件系统误格式化的分析"><a href="#9-FAT32文件系统误格式化的分析" class="headerlink" title="9.FAT32文件系统误格式化的分析"></a>9.FAT32文件系统误格式化的分析</h2><h3 id="格式化后数据的变化："><a href="#格式化后数据的变化：" class="headerlink" title="格式化后数据的变化："></a>格式化后数据的变化：</h3><ul><li>FAT表除了0号FAT项、1号FAT项和2号FAT项以外已被完全清空</li><li>根目录项被完全清零</li><li>子目录项的下的文件的目录项还存在</li></ul><h3 id="格式化之后的文件恢复方法："><a href="#格式化之后的文件恢复方法：" class="headerlink" title="格式化之后的文件恢复方法："></a>格式化之后的文件恢复方法：</h3><ol><li>找到子目录下文件的目录项</li><li>计算文件的簇号</li><li>根据簇号跳转到扇区，即可找到文件的数据区</li><li>选择跟文件大小相同的字节，选择另外保存，即可将文件恢复</li></ol><h2 id="10-FAT32系统DBR破坏的恢复"><a href="#10-FAT32系统DBR破坏的恢复" class="headerlink" title="10.FAT32系统DBR破坏的恢复"></a>10.FAT32系统DBR破坏的恢复</h2><p>系统提示分区未格式化，显然是文件系统遭到破坏，winhex无法打开分区，可以断定DBR一定有错误。可以使用winhex打开分区所在的硬盘，然后跳转到该硬盘的DBR扇区。</p><h3 id="恢复方法："><a href="#恢复方法：" class="headerlink" title="恢复方法："></a>恢复方法：</h3><p>FAT32分区的DBR有一个备份，在分区的6号扇区，只要把这个备份找到并且复制过来就可以了。</p><h2 id="11-FAT32分区文件乱码的手工恢复"><a href="#11-FAT32分区文件乱码的手工恢复" class="headerlink" title="11.FAT32分区文件乱码的手工恢复"></a>11.FAT32分区文件乱码的手工恢复</h2><h3 id="数据丢失的原因："><a href="#数据丢失的原因：" class="headerlink" title="数据丢失的原因："></a>数据丢失的原因：</h3><p>文件系统把不是目录项的数据当成目录项读取。打开分区只能看到乱码</p><h3 id="数据恢复的思路和方法"><a href="#数据恢复的思路和方法" class="headerlink" title="数据恢复的思路和方法"></a>数据恢复的思路和方法</h3><p>思路：手工建一个目录项，指向用户的子目录</p><p>方法一：</p><p>搜索这些文件的目录项，找到它们的子目录。</p><p>方法二：</p><ol><li><p>点击文件夹所在的数据区</p></li><li><p>数据区内的数据显示的是一堆乱码（子目录和父目录的正常格式：子目录开头用2E 20 20 20 20 20 20 20 20 20 20开头；父目录用2E 2E 20 20 20 20 20 20 20 20 20 开头）</p></li><li><p>看文件夹在哪个簇号的方法：点击变成乱码的文件夹，然后将文件夹所在的扇区号复制到跳至扇区的框中，下面的结果就是为文件夹所在的簇号</p></li><li><p>然后将簇号放到计算器中将十进制转换为十六进制</p></li><li><p>搜索父目录在2B 7C的所有父目录 方法：找一个部分为0的扇区将它们填为“2E 2E 20 20 20 20 20 20 20 20 20 3F 3F 3F 3F 3F 3F 3F 3F 3F 00 00 3F 3F 3F 3F 7C 2B”（注：因为在winhex中的数值与外界的数值是相反的；又因为数值是从低位簇开始填写的，所以这里高位簇为0）。</p><p>7C 2B为高位簇</p></li><li><p>复制选块为十六进制，在查找十六进制数值里进行搜索–勾上通配符、全部搜索、偏移条件：512&#x3D;32，列出搜索结果</p></li><li><p>将搜索到的子目录高低位簇做记录</p></li><li><p>然后点击变乱码的文件夹将文件夹的数据区清零，然后再将虚拟的子目录复制到文件夹的数据区中，再将记录好的高低位簇填入到虚拟子目录中</p></li></ol><p>如果文件直接在根目录下或者直接在变成乱码的文件中，恢复方式：</p><p>1.搜索文件的开头4个字节</p><p>2.复制开头的4个字节粘贴到查找16进制数值里面去搜索</p><p>3.搜索到后将数据提取出来就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据恢复" scheme="https://github.com/HKingDragon/hkingdragon.github.io/categories/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
    
    <category term="文件系统" scheme="https://github.com/HKingDragon/hkingdragon.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>NTFS文件系统</title>
    <link href="https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://github.com/HKingDragon/hkingdragon.github.io/2022/04/26/NTFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-04-26T10:07:55.000Z</published>
    <updated>2022-04-27T10:32:05.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="https://music.163.com/outchain/player?type=2&id=29809963&auto=1&height=66"></iframe><h1 id="NTFS文件系统"><a href="#NTFS文件系统" class="headerlink" title="NTFS文件系统"></a>NTFS文件系统</h1><h2 id="NTFS文件系统基本介绍"><a href="#NTFS文件系统基本介绍" class="headerlink" title="NTFS文件系统基本介绍"></a>NTFS文件系统基本介绍</h2><p><a href="https://www.dgxue.com/huifu/tag/ntfs/">NTFS</a><a href="https://www.dgxue.com/huifu/tag/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/">文件系统</a>是随着Windows NT操作系统的诞生而产生的，并随着Windows NT 4跨入主力文件系统的行列。它的优点是安全性和稳定性极其出色，在使用中不易产生文件碎片；同时它还提供了容错结构日志，可以将用户的操作全部记录下来，从而保护了系统的安全。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>安全性</p></li><li><p>可恢复性</p></li><li><p>文件压缩</p></li><li><p>磁盘配额</p></li><li><p>B+树的文件管理</p><p>NTFS利用B＋树文件管理方法来跟踪文件在磁盘上的位置。在NTFS中文件名顺序存放，因而查找速度更快。如果卷比较大，B＋树会在宽度上增长，而不会在深度上增长，因此，当目录增大时，NTFS并没有显示出明显的性能下降。</p><p><img src="https://s2.loli.net/2022/04/26/U1sfOPLvzZxtaFm.png" alt="image-20220425090847401"></p></li></ol><h2 id="NTFS文件系统结构总览"><a href="#NTFS文件系统结构总览" class="headerlink" title="NTFS文件系统结构总览"></a>NTFS文件系统结构总览</h2><p>NTFS分区也被称为NTFS卷，卷上簇的大小，又称为卷因子，其大小是用户在创建NTFS卷时确定的。簇的大小一定是扇区大小的整数倍，通常是2n（n为整数）。</p><center><b>NTFS卷大小和簇大小关系表</b></center><table><thead><tr><th>卷大小（MB）</th><th>每簇的扇区</th><th>默认的簇大小</th></tr></thead><tbody><tr><td>≤512</td><td>1</td><td>512个字节</td></tr><tr><td>513～1024</td><td>2</td><td>1024个字节（1KB）</td></tr><tr><td>1025～2048</td><td>4</td><td>2048个字节（2KB）</td></tr><tr><td>≥2049</td><td>8</td><td>4KB</td></tr></tbody></table><p>NTFS文件系统使用了逻辑簇号（Logical Cluster Number，LCN）和虚拟簇号（Virtual Cluster Number，VCN）对卷进行管理。LCN是对卷的第一个簇到最后一个簇进行编号，只要知道LCN号和簇的大小以及NTFS卷在物理磁盘中的起始扇区（绝对扇区）就可以对簇进行定位，而这些信息在NTFS卷的引导扇区中可以找到（BPB参数）。找到簇在磁盘中的物理位置的计算公式是：</p><center>每簇扇区数×簇号＋卷的隐含扇区数（卷之前的扇区总数）＝簇的起始绝对扇区号</center><p>虚拟簇号（VCN）则是将特定文件的簇从头到尾进行编号，这样做的原因是方便系统对文件中的数据进行引用，VCN并不要求在物理上是连续的，要确定VCN的磁盘上的定位需先将其转换为LCN。</p><p>NTFS的第一个扇区为引导扇区，即DBR扇区。</p><p>在分区的第一个扇区（引导扇区DBR）后是15个扇区的NTLDR区域，这16个扇区共同构成$BOOT文件。在NTLDR后（但不一定是物理上相连的）是主文件表（Master File Table，MFT）区域，主文件表由文件记录构成，每个文件记录占2个扇区，文件记录简称为FR（File Record）。在FAT文件系统中是通过FAT表和文件目录项存储文件数据和记录文件的文件名、扩展名、建立时间、访问时间、修改时间、文件属性、文件大小、文件在磁盘中所占用的簇等信息进行管理的，而在NTFS文件系统中这些信息被称为属性，包括文件的内容在NTFS中也称为属性，各种属性被放入文件记录中进行管理。</p><p>NTFS文件系统的主文件表中还记录了一些非常重要的系统数据，这些数据被称为元数据（metadata）文件，简称为“元文件”，其中包括了用于文件定位和恢复的数据结构、引导程序数据及整个卷的分配位图等信息。NTFS文件系统将这些数据都当作文件进行管理，这些文件用户是不能访问的，它们的文件名的第一个字符都是“$”，表示该文件是隐藏的。在NTFS文件系统中，这样的文件主要有16个。</p><ul><li>MFT本身（$Mft）</li><li>MFT镜像（$MftMirr）</li><li>日志文件（$LogFile）</li><li>卷文件（$Volume）</li><li>属性定义表（$AttrDef）</li><li>根目录（$Root）</li><li>位图文件（$Bitmap）</li><li>引导文件（$Boot）</li><li>坏簇文件（$BadClus）</li><li>安全文件（$Secure）</li><li>大写文件（$UpCase）</li><li>扩展元数据文件（$Extended metadata directory）</li><li>重解析点文件（$Extend&#x2F;$Reparse）</li><li>变更日志文件（$Extend&#x2F;$UsnJrnl）</li><li>配额管理文件（$Extend&#x2F; $Quota）</li><li>对象ID文件（$Extend&#x2F;$ObjId）等</li></ul><p>这16个元数据文件总是占据着MFT的前16项记录，在这16项以后就是用户建立的文件和文件夹的记录了。</p><p>每个文件记录在主文件表中占据的磁盘空间一般为1KB，也就是两个扇区，NTFS文件系统分配给主文件表的区域大约占据了磁盘空间的12.5％，剩余的磁盘空间用来存放其他元文件和用户的文件。</p><center><b>NTFS文件系统的大致结构</b></center><p><img src="https://s2.loli.net/2022/04/26/pY6X2TnhNEiKu5I.png" alt="image-20220425091814165"></p><p><b>注：在NTFS文件系统所在分区的最后一个扇区是DBR的备份，但该扇区并不属于NTFS文件系统。</b></p><h2 id="NTFS文件系统引导扇区分析"><a href="#NTFS文件系统引导扇区分析" class="headerlink" title="NTFS文件系统引导扇区分析"></a>NTFS文件系统引导扇区分析</h2><p><a href="https://www.dgxue.com/huifu/tag/ntfs/">NTFS</a>文件系统的<a href="https://www.dgxue.com/huifu/tag/%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA/">引导扇区</a>是$Boot的第一个扇区，它的结构与FAT文件系统的DBR类似，所以习惯上也称该扇区为DBR扇区。DBR扇区在操作系统的引导过程起着非常重要的作用，如果这个扇区遭到破坏，系统将不能正常启动。</p><p>NTFS文件系统的DBR扇区与FAT文件系统的结构一样，也包括跳转指令、OEM代号、BPB参数、引导程序和结束标志。</p><center><b>NTFS文件系统的DBR扇区</b></center><p><img src="https://s2.loli.net/2022/04/26/fcJlYXUVZjG8m2i.png" alt="image-20220425092102932"></p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>跳转指令本身占用2字节，它将程序执行流程跳转到引导程序处。例如，当前DBR中的“EB 52”，就是代表汇编语言的“JMP 52”。</p><blockquote><p>注意：该指令本身占用2字节，计算跳转目标地址时以该指令的下一字节为基准，所以实际执行的下一条指令应该位于54H。紧接着跳转指令的是一条空指令NOP（90H）。</p></blockquote><h3 id="OEM代号"><a href="#OEM代号" class="headerlink" title="OEM代号"></a>OEM代号</h3><p>这部分占8字节，其内容由创建该文件系统的OEM厂商具体安排。例如，微软的Windows系统将此处直接设置为“NTFS”，在NTFS文件系统中也称为“文件系统ID”。</p><h3 id="BPB（BIOS参数块）"><a href="#BPB（BIOS参数块）" class="headerlink" title="BPB（BIOS参数块）"></a>BPB（BIOS参数块）</h3><p>BPB是BIOS Parameter Block的缩写，其含义为BIOS参数块。BPB从DBR的第12（0BH偏移处）个字节开始，到偏移53H结束，占用73个字节，记录了有关该文件系统的重要信息</p><center><b>NTFS文件系统BPB参数的含义</b></center><p><img src="https://s2.loli.net/2022/04/26/FoIJQZyYUHk1KXa.png" alt="image-20220425104726046"></p><center><b>NTFS的DBR参数模板</b></center><p><img src="https://s2.loli.net/2022/04/26/tiCPvyuVW3JhpBd.png" alt="image-20220425104820856"></p><ol><li>0BH～0CH：每扇区字节数</li></ol><p>​每扇区字节数记录每个逻辑扇区的大小，其常见值为512字节，但512并不是固定值，该值可以由程序定义，合法值包括512字节、1024字节、2048字节和4096字节。</p><ol start="2"><li>0DH～0DH：每簇扇区数</li></ol><p>​每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇。</p><p>​如果这个分区是在系统安装前被格式化而来的，一般大于2GB的分区每簇默认占用8个扇区，也就是每簇大小为4KB，这个字节的内容就为十六进制值“08”。如果这个分区是由一个FAT分区转换而来，则每个簇一般占用1个扇区的空间，也就是每簇大小为512字节，这个字节的内容就是“01H”。</p><p>​在NTFS文件系统中所有的簇从0开始进行编号，每个簇都有一个自己的地址编号，并且从分区的第一个扇区就开始编簇。</p><ol start="3"><li>0EH～0FH：DBR保留扇区数</li></ol><p>​NTFS文件系统中DBR没有保留扇区，该值常为“0000”。</p><ol start="4"><li>10H～12H：总是0</li></ol><p>​这3个字节总是“00 00 00”。</p><ol start="5"><li>13H～14H：未用</li></ol><p>​这两个字节不用。</p><ol start="6"><li>15H～15H：介质描述符</li></ol><p>​这个字节为介质描述字节，一般硬盘为“F8H”；双面5.25英寸软盘为“F9H”；双面3.5英寸软盘RAM虚拟盘为“FAH”；3.5英寸、1.44MB的软盘一般为“F0H”。因为NTFS分区一定在硬盘上，所以此处常为16进制数“F8”。</p><ol start="7"><li>16H～17H：未用</li></ol><p>​这两个字节不用。</p><ol start="8"><li>18H～19H：每磁道扇区数</li></ol><p>​这是逻辑C&#x2F;H&#x2F;S中的一个参数，其值一般为63，NTFS已经不用此参数。</p><ol start="9"><li>1AH～1BH：磁头数</li></ol><p>​这是逻辑C&#x2F;H&#x2F;S中的一个参数，其值一般为255，NTFS已经不用此参数。</p><ol start="10"><li>1CH～1FH：隐藏扇区数</li></ol><p>​隐藏扇区数是指本分区之前使用的扇区数，该值与分区表中所描述的该分区的起始扇区号一致。对于主磁盘分区来讲，是MBR到该分区DBR之间的扇区数；对于扩展分区中的逻辑驱动器来讲，是其EBR到该分区DBR之间的扇区数。</p><ol start="11"><li>20H～23H：未用</li></ol><p>​这4字节不用。</p><ol start="12"><li>24H～27H：未用</li></ol><p>​这4字节不用，但总为80008000。</p><ol start="13"><li>28H～2FH：扇区总数</li></ol><p>​扇区总数是指分区的总扇区数。NTFS的BPB中记录的分区大小比分区表中记录的少一个扇区，因为分区最后一个扇区留给DBR备份使用了。</p><ol start="14"><li>30H～37H：$MFT的起始簇号</li></ol><p>​这8字节为$MFT的起始簇号，注意这个位置使用簇号定义的，而不是扇区号，并且该地址不是固定值。</p><ol start="15"><li>38H～3FH：$MFTMirr的起始簇号</li></ol><p>​这8字节为$MFTMirr的起始簇号，这个位置也使用簇号定义，而不是扇区号。$MFTMirr的地址也不是固定值的，可以在$MFT之后，也可以在$MFT之前。本例中，$MFTMirr的地址就在$MFT之前。</p><ol start="16"><li>40H～40H：文件记录的大小描述</li></ol><p>​这一个字节描述每个文件记录的簇数。注意该参数为带符号数，当其是负数时，说明每个文件记录的大小要小于每簇扇区数，在这种情况下，文件记录的大小用字节数表示，计算方法为：2-1×每个文件记录的簇数。例如，图4-401的DBR中该参数值为“F6H”，换算为十进制等于“-10”，所以每个文件记录的大小是2-1×-10＝210＝1024字节。</p><ol start="17"><li>41H～43H：未用</li></ol><p>​这3字节不用。</p><ol start="18"><li>44H～44H：索引缓冲的大小描述</li></ol><p>​这一个字节描述每个索引缓冲的簇数。注意该参数也是带符号数，当其是负数时，说明每个索引缓冲的大小要小于每簇扇区数，在这种情况下，索引缓冲的大小用字节数表示，计算方法为：2-1×每个索引缓冲的簇数。</p><ol start="19"><li>45H～47H：未用</li></ol><p>​这3字节不用。</p><ol start="20"><li>48H～4FH：卷序列号</li></ol><p>​这8字节为分区的逻辑序列号，也就是在命令行下输入DIR命令后显示的一排数据，这个序列号是硬盘格式化时随机产生的。</p><ol start="21"><li>50H～51H：校验和</li></ol><p>​BPB的最后四个字节是其校验和，一般都为0。</p><h3 id="引导程序"><a href="#引导程序" class="headerlink" title="引导程序"></a>引导程序</h3><p>NTFS的DBR引导程序占用426字节（54H～1FDH），其负责完成将系统文件NTLDR装入。对于一个没有安装操作系统的分区来讲，这段程序没有用处。</p><h3 id="结束标志"><a href="#结束标志" class="headerlink" title="结束标志"></a>结束标志</h3><p>NTFS的DBR引导程序占用426字节（54H～1FDH），其负责完成将系统文件NTLDR装入。对于一个没有安装操作系统的分区来讲，这段程序没有用处。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>以上5个部分共占用512字节，正好是1个扇区，这个扇区属于$BOOT文件的组成部分。该部分的内容中除了第5部分结束标志是固定不变之外，其余4部分都是不完全确定的，都因操作系统版本的不同而不同，也因硬盘的逻辑盘参数的变化而变化。</p></blockquote><h2 id="元文件-MFT分析"><a href="#元文件-MFT分析" class="headerlink" title="元文件$MFT分析"></a>元文件$MFT分析</h2><h3 id="NTFS文件系统的元文件"><a href="#NTFS文件系统的元文件" class="headerlink" title="NTFS文件系统的元文件"></a>NTFS文件系统的元文件</h3><p>在NTFS文件系统中，元文件主要有16个，包括MFT（<a href="https://www.dgxue.com/huifu/tag/mft/">$MFT</a>）、MFT镜像（$MFTMirr）、日志文件（$LogFile）、卷文件（$Volume）、属性定义表（$AttrDef）、根目录（$Root）、位图文件（$Bitmap）、引导文件（$Boot）、坏簇文件（$BadClus）、安全文件（$Secure）、大写文件（$UpCase）、扩展元数据文件（$Extended metadata directory）、重解析点文件（$Extend&#x2F;$Reparse）、变更日志文件（$Extend&#x2F;$UsnJrnl）、配额管理文件（$Extend&#x2F; $Quota）、对象ID文件（$Extend&#x2F;$ObjId）等，表4-30详细列出了这些元文件及它们的作用。</p><center><b>NTFS文件系统的元文件</b></center><table><thead><tr><th>序号</th><th>元文件</th><th>功能</th></tr></thead><tbody><tr><td>0</td><td>$MFT</td><td>主文件表本身，是每个文件的索引</td></tr><tr><td>1</td><td>$MFTMirr</td><td>主文件表的部分镜像</td></tr><tr><td>2</td><td>$LogFile</td><td>事务型日志文件</td></tr><tr><td>3</td><td>$Volume</td><td>卷文件，记录卷标等信息</td></tr><tr><td>4</td><td>$AttrDef</td><td>属性定义列表文件</td></tr><tr><td>5</td><td>$Root</td><td>根目录文件，管理根目录</td></tr><tr><td>6</td><td>$Bitmap</td><td>位图文件，记录了分区中簇的使用情况</td></tr><tr><td>7</td><td>$Boot</td><td>引导文件，记录了用于系统引导的数据情况</td></tr><tr><td>8</td><td>$BadClus</td><td>坏簇列表文件</td></tr><tr><td>9</td><td>$Quota（NTFS4）</td><td>在早期的Windows NT系统中此文件为磁盘配额信息</td></tr><tr><td>10</td><td>$Secure</td><td>安全文件</td></tr><tr><td>11</td><td>$UpCase</td><td>大小写字符转换表文件</td></tr><tr><td>12</td><td>$Extend metadata directory</td><td>扩展元数据目录</td></tr><tr><td>13</td><td>$Extend&#x2F;$Reparse</td><td>重解析点文件</td></tr><tr><td>14</td><td>$Extend&#x2F;$UsnJrnl</td><td>加密日志文件</td></tr><tr><td>15</td><td>$Extend&#x2F;$Quota</td><td>配额管理文件</td></tr><tr><td>16</td><td>$Extend&#x2F;$ObjId</td><td>对象ID文件</td></tr></tbody></table><h3 id="MFT文件介绍"><a href="#MFT文件介绍" class="headerlink" title="$MFT文件介绍"></a>$MFT文件介绍</h3><p>在NTFS文件系统中，磁盘上的所有数据都是以文件的形式出现的，即使是文件系统的管理信息也是以一组文件的形式存储的，即元文件。16个元文件中主文件表（$MFT）是一个非常重要的元文件，它由文件记录构成，每个文件记录占用2个扇区。</p><p>每个文件都有一个文件记录，包括元文件本身，而主文件表（$MFT）就是专门用来存储文件记录的一个元文件，在$MFT中前16个文件记录总是元文件的纪录。</p><p>由于$MFT文件本身的重要性，为了确保文件系统结构的可靠性，系统专门为它准备了一个镜像文件（$MFTMirr），也就是$MFT中的第2个记录。</p><p>$MFT中前16个文件记录总是元文件的记录，并且这16个文件记录的顺序是固定的，下面对这16个记录简单做一个介绍：</p><p>第1个记录就是$MFT自身的记录，也就是说$MFT首先对自己进行管理。</p><p>第2个记录是$MFTMirr的记录，也就是$MFT前4个文件记录的镜像。</p><p>第3个记录是日志文件（$LogFile）的记录，该文件是NTFS为实现可恢复性和安全性而设计的。当系统运行时，NTFS就会在日志文件中记录所有影响NTFS卷结构的操作，包括文件的创建和改变目录结构的命令，从而可在系统失败时能够恢复NTFS卷。</p><p>第4个记录是卷文件（$Volume）的记录，它包含卷名、NTFS的版本和一个标明该磁盘是否损坏的标志位，NTFS文件系统以此决定是否需要调用Chkdsk程序来进行修复。</p><p>第5个记录是属性定义表（$AttrDef，attribute definition table）的记录，其中存放着卷所支持的所有文件属性，并指出它们是否可以被索引和恢复等。</p><p>第6个记录是根目录（$ROOT）的记录，其中保存着该卷根目录下的所有文件和目录的索引。在访问一个文件后，NTFS就保留该文件的MFT引用，第二次就能够直接访问该文件。</p><p>第7个记录是位图文件（$Bitmap）的记录，NTFS卷的簇使用情况都保存在这个位图文件中，其中每一位（bit）代表卷中的一簇，标识该簇是空闲还是已分配。由于该文件可以很容易被扩大，所以，NTFS的卷可以很方便地动态扩大，而FAT格式的文件系统由于涉及FAT表的变化，所以不能随意对分区大小进行调整。</p><p>第8个记录是引导文件（$Boot）的记录，该文件中存放着操作系统的引导程序代码。该文件必须位于特定的磁盘位置才能够正确地引导系统，一般都是位于卷的最前面。</p><p>第9个记录是坏簇文件（$BadClus）的记录，它记录着该卷中所有损坏的簇号，防止系统对其进行分配使用。</p><p>第10个记录是安全文件（$Secure）的记录，它存储着整个卷的安全描述符数据库。NTFS文件和目录都有各自的安全描述符，为节省空间，NTFS将文件和目录的相同描述符存放在此公共文件中。</p><p>第11个记录为大写文件（$UpCase，upper case file）的记录，该文件包含一个大小写字符转换表。</p><p>第12个记录是扩展元数据目录（$Extended metadata directory）的记录。</p><p>第13个记录是重解析点文件（$Extend&#x2F;$Reparse）的记录。</p><p>第14个记录是变更日志文件（$Extend&#x2F;$UsnJrnl）的记录。</p><p>第15个记录是配额管理文件（$Extend&#x2F;$Quota）的记录。</p><p>第16个记录是对象ID文件（$Extend&#x2F;$ObjId）的记录。</p><p>第17～23记录是系统保留的记录，暂时不用，用于将来扩展。</p><p>从第24个记录开始存放用户文件的记录。</p><h2 id="文件记录分析"><a href="#文件记录分析" class="headerlink" title="文件记录分析"></a>文件记录分析</h2><h3 id="文件记录的结构"><a href="#文件记录的结构" class="headerlink" title="文件记录的结构"></a>文件记录的结构</h3><p>MFT以文件记录来实现对文件的管路，每个文件记录都对应着不同的文件，大小固定为1KB，也就是占用两个扇区。存放文件记录位置的第一个记录就称作“基本文件记录”。文件记录在MFT中物理上是连续的，从0开始依次按顺序编号。</p><p>文件记录由两部分构成，一部分是文件记录头，另一部分是属性列表。</p><center><b>文件记录的结构</b></center><table><thead><tr><th>结构</th><th>说明</th></tr></thead><tbody><tr><td>文件记录头</td><td></td></tr><tr><td>属性1</td><td></td></tr><tr><td>属性2</td><td></td></tr><tr><td>……</td><td></td></tr><tr><td>结束标志</td><td>“FFFFFFFFH”</td></tr></tbody></table><h3 id="文件记录头的结构"><a href="#文件记录头的结构" class="headerlink" title="文件记录头的结构"></a>文件记录头的结构</h3><center><b>NTFS文件记录头信息</b></center><table><thead><tr><th>字节偏移</th><th>字段长度（字节）</th><th>字段名和含义</th></tr></thead><tbody><tr><td>0x00</td><td>4</td><td>MFT标志，一定为字符串“FILE”</td></tr><tr><td>0x04</td><td>2</td><td>更新序列号（Update Sequence Number）的偏移</td></tr><tr><td>0x06</td><td>2</td><td>更新序列号的大小与数组，包括第一个字节</td></tr><tr><td>0x08</td><td>8</td><td>日志文件序列号（$LogFile Sequence Number，LSN）</td></tr><tr><td>0x10</td><td>2</td><td>序列号（Sequence Number）</td></tr><tr><td>0x12</td><td>2</td><td>硬连接数（Hard Link Count），即有多少目录指向该文件</td></tr><tr><td>0x14</td><td>2</td><td>第一个属性的偏移地址</td></tr><tr><td>0x16</td><td>2</td><td>标志（Flag），00H表示文件被删除，01H表示文件正在使用，02H表示目录被删除，03H表示目录正在使用</td></tr><tr><td>0x18</td><td>4</td><td>文件记录的实际长度</td></tr><tr><td>0x1C</td><td>4</td><td>文件记录的分配长度</td></tr><tr><td>0x20</td><td>8</td><td>基本文件记录中的文件索引号</td></tr><tr><td>0x28</td><td>2</td><td>下一属性ID，当增加新的属性时，将该值分配给新属性，然后该值增加，如果MFT记录重新使用，则将它置0，第一个实例总是0</td></tr><tr><td>0x2A</td><td>2</td><td>边界，Windows XP中为偏移0x30处</td></tr><tr><td>0x2C</td><td>4</td><td>文件记录参考号，Windows XP中使用，Windows 2000中无此参数</td></tr><tr><td>0x30</td><td>2</td><td>更新序列号</td></tr><tr><td>0x32</td><td>4</td><td>更新数组</td></tr></tbody></table><p>具体说明：</p><ul><li>偏移00H~03H为MFT的标志字符串，它总为”FILE”</li><li>每次记录被修改都将导致偏移08H~09H处的日志文件序列号$LogFile Sequence Number，LSN发生改变</li><li>偏移10H~11H处序列号Squence Number(SN)用于记录主文件表记录被重复使用的次数</li><li>偏移12H~13H处为硬连接数记录硬链接的数目，只出现在基本文件记录中</li><li>偏移18H~1FH为系统分配给文件记录的长度，一般为”00 04 00 00“，也就是1KB的长度</li><li>偏移20H~27H处为基本文件记录中的文件索引号，基本文件记录在此的值总为0。如果不为0,则是一个主文件表的文件索引号，指向所属的基本文件记录中的文件记录号。在基本文件记录中包含含有扩展文件记录的信息，存储在”属性列表 ATTRIBUTE_LIST“属性中。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据恢复" scheme="https://github.com/HKingDragon/hkingdragon.github.io/categories/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
    
    <category term="文件系统" scheme="https://github.com/HKingDragon/hkingdragon.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
